---
import Select from '@astrojs/starlight/components/Select.astro';
---

<starlight-theme-select>
	{/* TODO: Can we give this select a width that works well for each language’s strings? */}
	<Select
		icon="laptop"
		label="select brand"
		value="core"
		options={[
			{ label: "brand: core", selected: true, value: 'core' },
			{ label: "brand: professional", selected: false, value: 'professional' },
			{ label: "brand: internal", selected: false, value: 'internal' },
			{ label: "brand: whitelabel", selected: false, value: 'whitelabel' },
		]}
		width="20em"
	/>
</starlight-theme-select>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
	StarlightThemeProvider.updatePickers();
</script>

<script>
	type Theme = 'core' | 'professional' | 'internal' | 'whitelabel';

	class StarlightThemeSelect extends HTMLElement {
		/** Key in `localStorage` to store color theme preference at. */
		#key = 'starlight-theme';

		constructor() {
			super();
			this.#onThemeChange(this.#loadTheme());
			const select = this.querySelector('select');
			if (select) {
				select.addEventListener('change', (e) => {
					if (e.currentTarget instanceof HTMLSelectElement) {
						this.#onThemeChange(this.#parseTheme(e.currentTarget.value));
					}
				});
			}
		}

		/** Get a typesafe theme string from any JS value (unknown values are coerced to `'auto'`). */
		#parseTheme(theme: unknown): Theme {
			if (theme === 'core' || theme === 'internal' || theme === 'professional' || theme === 'whitelabel') {
				return theme;
			} else {
				return 'core';
			}
		}


		/** Update select menu UI, document theme, and local storage state. */
		#onThemeChange(theme: Theme): void {
			StarlightThemeProvider.updatePickers(theme);

			document.documentElement.dataset.theme = 'light';
			document.querySelector('.main-pane').classList.remove(`o3-brand-core`);
			document.querySelector('.main-pane').classList.remove(`o3-brand-professional`);
			document.querySelector('.main-pane').classList.remove(`o3-brand-internal`);
			document.querySelector('.main-pane').classList.remove(`o3-brand-whitelabel`);
			document.querySelector('.main-pane').classList.add(`o3-brand-${theme}`);

			this.#storeTheme(theme);
		}

		/** Store the user’s preference in `localStorage`. */
		#storeTheme(theme: Theme): void {
			if (typeof localStorage !== 'undefined') {
				if (theme) {
					localStorage.setItem(this.#key, theme);
				} else {
					localStorage.removeItem(this.#key);
				}
			}
		}

		/** Load the user’s preference from `localStorage`. */
		#loadTheme(): Theme {
			const theme = typeof localStorage !== 'undefined' && localStorage.getItem(this.#key);
			return this.#parseTheme(theme);
		}
	}

	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>
