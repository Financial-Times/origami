---
import {filterAndSortNavbars,} from "@/helpers/utils"
import NavItem from "./NavItem.astro"

import { getEntryBySlug } from 'astro:content';


const {secondaryNav, primaryNav} = Astro.props
const {children, lastChildrenDepth} = secondaryNav || {}

const currentPage = Astro.url.pathname

const paths = currentPage.split('/').filter(x => x)
const ancestors = secondaryNav && await generateAncestors(paths)


let renderSecondaryNav = false
let secondaryNavChildren = []

if (children) {
	secondaryNavChildren = formatContentForSubNav(filterAndSortNavbars(children))
	renderSecondaryNav = true
}

if (lastChildrenDepth && ancestors) {
	ancestors.pop()
}

function formatContentForSubNav(contentArray) {
	return contentArray && contentArray.map(d => {
		const url = `/${d.collection}/${d.slug}`
		return {
			label: d.data.nav_label,
			url,
			"aria-current": currentPage === url ? "page" : undefined,
		}
	});
}

async function generateAncestors(paths) {
	// This assumes that for secondary nav first item will be always be the collection name
	const collectionName = paths[0]
	const urls = primaryNav.filter(p => p.url === `/${collectionName}`)
	await Promise.all(paths.map(async (path, i) => {
		if (i == 0 ) return
		const slugPath = paths.slice(1, i + 1).join("/")
		const entry = await getEntryBySlug(collectionName, slugPath)
		const url = `/${collectionName}/${slugPath}`
		const label = entry.data.nav_label
		urls.push({
			label,
			url,
			"aria-current": currentPage === url ? "page" : undefined,
		})
	}))
	return urls.length > 0 ? urls : undefined
}

---

{
	renderSecondaryNav && (
		<nav
			class="o-header-services__secondary-nav"
			aria-label="secondary"
			data-o-header-services-nav="">
			<div
				class="o-header-services__secondary-nav-content"
				data-o-header-services-nav-list="">
				{ancestors && (
					<ol
						class="o-header-services__secondary-nav-list o-header-services__secondary-nav-list--ancestors"
						aria-label="Ancestor sections">
						{ancestors.map(nav => (
							<NavItem nav={nav} />
						))}
					</ol>
				)}
				{secondaryNavChildren && (
					<ul
						class="o-header-services__secondary-nav-list o-header-services__secondary-nav-list--children"
						aria-label="Child sections">
						{secondaryNavChildren.map(nav => (
							<NavItem nav={nav} />
						))}
					</ul>
				)}
			</div>
			<button
				class="o-header-services__scroll-button o-header-services__scroll-button--left"
				title="scroll left"
				aria-hidden="true"
				disabled
			/>
			<button
				class="o-header-services__scroll-button o-header-services__scroll-button--right"
				title="scroll right"
				aria-hidden="true"
				disabled
			/>
		</nav>
	)
}
