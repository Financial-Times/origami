---
import {getCollection} from "astro:content"
import {createSecondaryNavBarChildren, filterAndSortNavbars} from "@/helpers/utils"
import NavItem from "./NavItem.astro"

const currentPage = Astro.url.pathname

const paths = currentPage.split("/").filter(x => x)
const ancestors = generateAncestors(paths)

const {secondaryNav} = Astro.props
const {subNavPages, renderSecondaryNav, collectionName, subDirectory,	collectionFilterCallback, lastChildrenDepth} = secondaryNav || {}

let secondaryNavChildren = []

if (subNavPages?.length > 0) {
	secondaryNavChildren = createSecondaryNavBarChildren(subNavPages,currentPage)
} else if (lastChildrenDepth) {
	if (collectionName) {
		const documentCollections = await getCollection(collectionName, ({id}) => id.startsWith(subDirectory) )
		secondaryNavChildren = formatContentForSubNav(documentCollections)
	}
	ancestors.pop()
}
 else if (collectionName && collectionFilterCallback) {
	const documentCollections = await getCollection(collectionName, collectionFilterCallback )
	secondaryNavChildren = formatContentForSubNav(documentCollections)
}

function formatContentForSubNav(contentArray) {
	return filterAndSortNavbars(contentArray).map(d => {
		const url = `/${collectionName}/${d.slug}`
		return {
			label: d.data.nav_label,
			url,
			"aria-current": currentPage === url ? "page" : undefined,
		}
	});
}

function generateAncestors(paths) {
	const urls = []
	paths.forEach((breadCrumb, i) => {
		const url = `/${paths.slice(0, i + 1).join("/")}`
		const label = breadCrumb.replace(/[-_]/g, " ")
		urls.push({
			label,
			url,
			"aria-current": currentPage === url ? "page" : undefined,
		})
	})
	return urls.length > 0 ? urls : undefined
}

---

{
	renderSecondaryNav && (
		<nav
			class="o-header-services__secondary-nav"
			aria-label="secondary"
			data-o-header-services-nav="">
			<div
				class="o-header-services__secondary-nav-content"
				data-o-header-services-nav-list="">
				{ancestors && (
					<ol
						class="o-header-services__secondary-nav-list o-header-services__secondary-nav-list--ancestors"
						aria-label="Ancestor sections">
						{ancestors.map(nav => (
							<NavItem nav={nav} />
						))}
					</ol>
				)}
				{secondaryNavChildren && (
					<ul
						class="o-header-services__secondary-nav-list o-header-services__secondary-nav-list--children"
						aria-label="Child sections">
						{secondaryNavChildren.map(nav => (
							<NavItem nav={nav} />
						))}
					</ul>
				)}
			</div>
			<button
				class="o-header-services__scroll-button o-header-services__scroll-button--left"
				title="scroll left"
				aria-hidden="true"
				disabled
			/>
			<button
				class="o-header-services__scroll-button o-header-services__scroll-button--right"
				title="scroll right"
				aria-hidden="true"
				disabled
			/>
		</nav>
	)
}
