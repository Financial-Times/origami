@import 'o-spacing/main';
@import 'o-brand/main';
@import 'o-buttons/main';
@import 'o-colors/main';
@import 'o-grid/main';
@import 'o-icons/main';
@import 'o-typography/main';

@import './src/scss/brand';
@import './src/scss/variables';
@import './src/scss/mixins';

/// Output all o-message features. Accepts an options map to include features granularly.
/// Options include which types, states, and layouts of o-message to include.
/// See the README for more details.
/// @example To include all o-message styles.
///     @include oMessage();
/// @example To include only error and success alert styles.
///     @include oMessage($opts: (
///     	'types': ('alert'),
///     	'states': ('error', 'success'),
///     ));
/// @param {Map} $opts ['types': ('alert', 'notice', 'action), 'states': ('error', 'success', 'inform', 'neutral', 'inform-inverse', 'warning', 'warning-light', 'feedback'), 'layouts': ('inner')]
@mixin oMessage($opts: (
	'types': ('action', 'alert', 'notice'),
	'states': ('error', 'success', 'neutral', 'inform', 'inform-inverse', 'warning', 'warning-light', 'feedback'),
	'layouts': ('inner')
)) {
	$types: map-get($opts, 'types');
	$states: map-get($opts, 'states');
	$layouts: map-get($opts, 'layouts');

	.o-message {
		@include oTypographySans($_o-message-typography-scale);

		.o-message__container {
			@include oGridContainer($bleed: true);
			padding-left: $_o-message-spacing / 4;
			padding-right: $_o-message-spacing / 4;

			&:before {
				top: $_o-message-text-spacing / 2;
			}
		}

		.o-message__content {
			position: relative;
			margin-top: 0;
			margin-bottom: 0;

			.o-message__content-main {
				display: inline-block;
				margin-top: oSpacingByName('s4');
				margin-bottom: oSpacingByName('s4');
				margin-right: oSpacingByName('s6');
			}

			.o-message__content-highlight {
				@include oTypographySans($weight: 'semibold', $include-font-family: false);
			}
		}

		.o-message__content-main a,
		.o-message__content-additional a {
			@include oTypographyLink();
			border-width: 1px;
		}

		.o-message__actions {
			display: inline-block;
			padding: 0 ($_o-message-close-icon-size * 1px) $_o-message-text-spacing 0;
		}

		.o-message__actions__primary {
			@include oButtonsContent();
			margin-right: oSpacingByName('s6');
			&:only-child {
				margin-right: 0;
			}
		}

		.o-message__actions__secondary {
			@include oTypographyLink();
			white-space: nowrap;
		}
	}

	.o-message--closed {
		display: none;
	}

	@each $state in $states {
		@if index($o-message-states, $state) and _oMessageSupports($state) {
			$state-types: map-get($_o-message-states-to-types, $state);
			@include oMessageAddState(
				$name: $state,
				$opts: null,
				$types: $state-types
			);
		}
	}

	@if index($types, 'alert') != null and _oMessageSupports('alert') {
		.o-message.o-message--alert {
			.o-message__content {
				padding-left: $_o-message-spacing;
			}
		}
	}

	@if index($types, 'notice') != null and _oMessageSupports('notice') {
		.o-message.o-message--notice {
			.o-message__content {
				padding-left: $_o-message-spacing / 2;
			}
		}
	}

	@if index($types, 'action') != null and _oMessageSupports('action') {
		.o-message.o-message--action {
			.o-message__content {
				padding: oSpacingByName('s4') 0;

				@include oGridRespondTo(S) {
					padding: $_o-message-spacing 0 $_o-message-spacing $_o-message-spacing;
				}

				.o-message__content-main {
					margin: oSpacingByName('s2') oSpacingByName('s6') oSpacingByName('s2') 0;
				}

				.o-message__actions {
					margin: oSpacingByName('s2') 0;
					padding: 0 $_o-message-close-icon-size * 1px 0 0;
				}
			}

			.o-message__content--center-align {
				margin: 0 auto;
				padding-left: 0;

				@include oGridRespondTo(S) {
					text-align: center;
				}
			}
		}
	}

	@if index($layouts, 'inner') {
		.o-message.o-message--inner {
			.o-message__container {
				padding: oSpacingByName('s2') oSpacingByIncrement(5) oSpacingByName('s2') ($_o-message-spacing / 4);

				&:before {
					top: unset;
				}

				.o-message__close {
					right: oSpacingByName('s2');

					@include oGridRespondTo(S) {
						right: oSpacingByName('s4');
					}
				}
			}

			.o-message__content {
				max-width: oTypographyMaxLineWidth();
				margin-top: oSpacingByName('s3');
				margin-bottom: 0;

				.o-message__content-main {
					margin-top: 0;
					margin-bottom: oSpacingByName('s3');
				}
			}

			.o-message__actions {
				padding-bottom: oSpacingByName('s3');
			}
		}
	}
}

@if ($o-message-is-silent == false) {
	@include oMessage();

	// Set to silent again to avoid being output twice
	$o-message-is-silent: true !global;
}
