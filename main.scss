@import 'mathsass/dist/math';
@import 'o-brand/main';

@import 'src/scss/variables';
@import 'src/scss/palette';
@import 'src/scss/use-cases';
@import 'src/scss/functions';
@import 'src/scss/mixins';

// Set the palette colors programatically
@include _oColorsSetDefaultPaletteColors;
@include _oColorsSetDefaultUsecases;
@include _oColorsSetPaletteTints;

/// Output `o-colors` CSS.
///
/// @example Output all `o-colors` styles.
///     @include oColors();
///
/// @example Output only `o-colors` CSS custom properties ("CSS variables").
///     @include oColors($opts: (
///     	'palette-custom-properties': true
///     ));
///
/// @param {Map} $opts - The o-colors features to output. See the [readme](https://registry.origami.ft.com/components/o-colors) for a full list of options.
@mixin oColors($opts: ('palette-custom-properties': true)) {
	$palette-proeprties: map-get($opts, 'palette-custom-properties');

	@if($palette-proeprties) {
		:root {
			@each $color-map in oColorsGetPalette() {
				$name: map-get($color-map, 'name');
				#{--o-colors-}#{$name}: oColorsByName($name);
			}
		}
	}
}

// If noisy, output helper classes for use cases and palette colors
@if ($o-colors-is-silent == false) {
	// Include all classes and custom properties.
	@include oColors();
	// Set silent mode back on to avoid multiple outputs of helper classes
	$o-colors-is-silent: true;
}
