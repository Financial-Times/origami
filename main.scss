@import 'src/scss/variables';

// Version 1
@import 'src/scss/v1/palette';
@import 'src/scss/v1/use-cases';

// Version 2
@import 'src/scss/v2/palette';
@import 'src/scss/v2/use-cases';

@import 'src/scss/functions';
@import 'src/scss/mixins';

@if _oColorsSetVersion() != true {
	@error "The o-colors version #{$o-colors-version} does not exist. Please use version 2.";
}

@if $o-colors-version == 2 {
	@include _oColorsSetTintPalette();
	@include _oColorsSetShadesPalette();
}

// If noisy, output helper classes for use cases and palette colours
@if ($o-colors-is-silent == false) {
	@each $usecase, $props in $o-colors-usecases {
		@each $prop, $color in $props {
			#{'.o-colors-' + $usecase + '-' + $prop} {
				@if $prop == text or $prop == all {
					color: oColorsGetPaletteColor($color);
				}
				@if $prop == background or $prop == all {
					background-color: oColorsGetPaletteColor($color);
				}
				@if $prop == border or $prop == all {
					border-color: oColorsGetPaletteColor($color);
				}
			}
		}
	}
	@each $name, $csscolor in $o-colors-palette {
		#{'.o-colors-palette-' + $name} {
			background-color: $csscolor;
		}
	}

	// Set silent mode back on to avoid multiple outputs of helper classes
	$o-colors-is-silent: true;
}

.text-color-context {
	/* oColorsFor */
	@include oColorsFor('page');
	/* call the function directly */
	color: oColorsGetContrastedColor(80, 'pink', 'black');
}
