@include test-module('oBrandDefine') {
    @include test('Adds new brand variables to a global map') {
        $component1-brand1: (
            'variables': (
                example: blue
            ),
            'settings': (
                'test': true,
                'example': true
            )
        );
        $component1-brand2: (
            'variables': (
            ),
            'settings': (
                'example': true
            )
        );
        $component2-brand1: (
            'variables': (
                other: red
            ),
            'settings': (
                'thing': true
            )
        );
        $component2-brand2: (
            'variables': (
                other: white
            ),
            'settings': (
            )
        );
        @include oBrandDefine('o-component1', 'brand1', $component1-brand1);
        @include oBrandDefine('o-component1', 'brand2', $component1-brand2);
        @include oBrandDefine('o-component2', 'brand1', $component2-brand1);
        @include oBrandDefine('o-component2', 'brand2', $component2-brand2);
        @include assert-equal(map-get($_o-brands, "o-component1"), (
            'brand1': $component1-brand1,
            'brand2': $component1-brand2
        ));
        @include assert-equal(map-get($_o-brands, "o-component2"), (
            'brand1': $component2-brand1,
            'brand2': $component2-brand2
        ));
    }
}

@include test-module('oBrandConfigureFor') {
    @include test('Does not output styles for unsupported variants') {
        @include assert('The "b2b inverse" variant is supported by the test brand so should output') {
            @include output {
                @include oBrandConfigureFor($component: 'o-example', $variant: ('b2b' , 'inverse')) {
                    content: '"b2b inverse" compound variant supported';
                }
            }
            @include expect {
                content: '"b2b inverse" compound variant supported';
            }
        }

        @include assert('The "b2b" variant is supported by the test brand so should output') {
            @include output {
                @include oBrandConfigureFor($component: 'o-example', $variant: 'b2b') {
                    content: '"b2b" variant supported';
                }
            }
            @include expect {
                content: '"b2b" variant supported';
            }
        }

        @include assert('The "unsupported" variant is not supported by the test brand so should not output') {
            @include output {
                @include oBrandConfigureFor($component: 'o-example', $variant: 'unsupported') {
                    content: '"unsupported" variant is not supported';
                }
            }
            @include expect {
            }
        }

        @include assert('Although "b2b" is supported the "unsupported" variant part is not supported by the test brand so should not output') {
            @include output {
                @include oBrandConfigureFor($component: 'o-example', $variant: ('b2b', 'unsupported')) {
                    content: '"b2b unsupported" compound variant is not supported';
                }
            }
            @include expect {
            }
        }
    }

    @include test('Ignores null variants') {
        @include oBrandConfigureFor($component: 'o-example', $variant: null) { // should have no effect
            @include oBrandConfigureFor($component: 'o-example', $variant: 'inverse') {
                @include oBrandConfigureFor($component: 'o-example', $variant: null) { // should have no effect
                    // variant: inverse
                    $property: oBrandGet($component: 'o-example', $variables: 'example-background');
                    @include assert-equal($property, grey);
                    // variant: inverse b2b
                    @include oBrandConfigureFor($component: 'o-example', $variant: 'b2b') {
                        @include oBrandConfigureFor($component: 'o-example', $variant: null) { // should have no effect
                            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
                            @include assert-equal($property, darkred);
                        }
                    }
                    // variant: inverse
                    $property: oBrandGet($component: 'o-example', $variables: 'example-background');
                    @include assert-equal($property, grey);
                }
            }
        }
        // variant: none
        $property: oBrandGet($component: 'o-example', $variables: 'example-background');
        @include assert-equal($property, white);
    }
}

@include test-module('oBrandGet') {
    @include test('Gets a default variable value for a defined brand') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background');
        @include assert-equal($property, white);
    }

    @include test('Concatenates multiple variables for use in one property value') {
        $property: oBrandGet($component: 'o-example', $variables: (example-border-width example-border-style example-border-color));
        @include assert-equal($property, 1px solid grey);
    }

    @include test('Gets a variable value for a configured variant') {
        @include oBrandConfigureFor($component: 'o-example', $variant: 'inverse') {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, grey);
        }
    }

    @include test('Gets a variable value for a configured compound variant, regardless of order') {
        // inverse b2b
        @include oBrandConfigureFor($component: 'o-example', $variant: ('b2b' , 'inverse')) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, darkred);
        }
        // b2b inverse
        @include oBrandConfigureFor($component: 'o-example', $variant: ('inverse', 'b2b')) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, darkred);
        }
    }

    @include test('Gets a variable value for a configured variant, regardless of list separator') {
        // space
        @include oBrandConfigureFor($component: 'o-example', $variant: ('b2b' 'inverse')) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, darkred);
        }
        // comma
        @include oBrandConfigureFor($component: 'o-example', $variant: ('b2b', 'inverse')) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, darkred);
        }
    }

    @include test('Gets a variable value for a configured compound variant (nested)') {
        @include oBrandConfigureFor($component: 'o-example', $variant: 'inverse') {
            // variant: inverse
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, grey);
            // variant: inverse b2b
            @include oBrandConfigureFor($component: 'o-example', $variant: 'b2b') {
                $property: oBrandGet($component: 'o-example', $variables: 'example-background');
                @include assert-equal($property, darkred);
            }
            // variant: inverse
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, grey);
        }
    }

    @include test('Gets a variable value for a "forced" variant') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background', $force-variant: 'inverse');
        @include assert-equal($property, grey);

        $property: oBrandGet($component: 'o-example', $variables: 'example-background', $force-variant: ('inverse', 'b2b'));
        @include assert-equal($property, darkred);
    }

    @include test('Gets a variable value for a "forced" variant, ignoring configured variants') {
        @include oBrandConfigureFor($component: 'o-example', $variant: 'b2b') {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background', $force-variant: 'inverse');
            @include assert-equal($property, grey);
        }
    }
}

@include test-module('oBrandOverride') {
    @include test('Overrides brand variable value') {
        @include oBrandOverride($component: 'o-example', $config: ('variables': (
                'example-background': blue
            ))) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, blue);
        }
    }

    @include test('Overrides brand settings') {
        @include assert('The "unsupported" variant is not supported by the test brand but is overriden and output') {
            @include output {
                @include oBrandOverride($component: 'o-example', $config: ('settings': (
                    'unsupported': true
                ))) {
                    @include oBrandConfigureFor($component: 'o-example', $variant: 'unsupported') {
                        content: '"unsupported" variant is not supported but is overriden';
                    }
                }
            }
            @include expect {
                content: '"unsupported" variant is not supported but is overriden';
            }
        }

        @include assert('The "b2b" variant is supported by the test brand but is overriden and should not be output') {
            @include output {
                @include oBrandOverride($component: 'o-example', $config: ('settings': (
                    'b2b': false
                ))) {
                    @include oBrandConfigureFor($component: 'o-example', $variant: 'b2b') {
                        content: '"b2b" variant supported but is overriden';
                    }
                }
            }
            @include expect {
            }
        }
    }

    @include test('Does not override default variable outside of the override content block') {
        $overrides: ('variables': (
                'example-override-weight': 'bold',
                'example-background': blue
        ));
        @include oBrandOverride($component: 'o-example', $config: $overrides) {
            $property: oBrandGet($component: 'o-example', $variables: 'example-background');
            @include assert-equal($property, blue);
        }
        $property: oBrandGet($component: 'o-example', $variables: 'example-background');
        // overriden variables should be back to normal outside the mixin content block
        @include assert-equal($property, white);
        // override specific variables should not be available outside the mixin content block
        $property: oBrandGet($component: 'o-example', $variables: 'example-override-weight');
        @include assert-equal($property, null);
    }

    @include test('Overrides variant configuration') {
        $overrides: ('variables': (
            'inverse': (
                'example-background': purple
            )
        ));
        @include oBrandOverride($component: 'o-example', $config: $overrides) {
            @include oBrandConfigureFor($component: 'o-example', $variant: 'inverse') {
                $property: oBrandGet($component: 'o-example', $variables: 'example-background');
                @include assert-equal($property, purple);
            }
        }
    }
}
