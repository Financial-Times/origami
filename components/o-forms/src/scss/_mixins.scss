/// @output Styles for a professional theme form field e.g. `.o-forms-field--professional`, `.`.o-forms-field--professional-inverse`.
///
/// @param {String} $theme - The form theme to output. Either a 'professional' or 'professional-inverse'.
@mixin _oFormsAdd($theme: null) {
	// Error if the theme is not expected.
	@if (
		$theme != null and type-of($theme) != "string" and type-of($theme) != "map"
	) {
		@error 'Expected the form theme to be a string or `null`.';
	}

	.o-forms-field--#{$theme} {
		@include _oFormsStateContent($theme);
	}
}

/// @access private
/// @param {String} $theme either 'professional' or 'professional-inverse'
/// @output styles for 'professional' or 'professional-inverse' theme

@mixin _oFormsStateContent($theme) {
	color: _oFormsGet("default-text", $theme);

	.o-forms-input--radio-round {
		input[type="radio"] {// stylelint-disable-line selector-no-qualifying-type
			&:checked + .o-forms-input__label:before {// stylelint-disable-line selector-no-qualifying-type
				border-color: _oFormsGet("controls-base", $theme);
			}
		}
		.o-forms-input__label {
			&:before {
				border: 1px solid _oFormsGet("default-border", $theme);
			}

			&:after {
				background-color: _oFormsGet("controls-base", $theme);
			}
		}
	}

	.o-forms-input--checkbox {
		input[type=checkbox] {// stylelint-disable-line selector-no-qualifying-type
			&:indeterminate + .o-forms-input__label:after {// stylelint-disable-line selector-no-qualifying-type
				@include oIconsContent('minus', _oFormsGet('controls-checked-base', $theme), $_o-forms-checkbox-radio-width);
				background-color: _oFormsGet('controls-base', $theme);
			}
		}

		input[type=checkbox] ~ .o-forms-input__label {// stylelint-disable-line selector-no-qualifying-type
			&:before {
				border: 1px solid _oFormsGet("default-border", $theme);
			}

			&:after {
				@include oIconsContent('tick', _oFormsGet('controls-checked-base', $theme), $_o-forms-checkbox-radio-width);
				background-color: _oFormsGet("controls-base", $theme);
			}
			.o-forms-input__label__prompt {
				color: _oFormsGet("default-text", $theme);
			}
		}
	}

	@if $theme == "professional-inverse" {
		.o-forms-title {
			.o-forms-title__main:after,
			.o-forms-title__prompt {
				color: rgba(_oFormsGet("default-text", $theme), 0.7);
			}
		}
		input {
			@include oNormaliseFocusApply() {
				@include oNormaliseFocusContentInverse();
			}
		}

		input[type="radio"] {// stylelint-disable-line selector-no-qualifying-type
			&:focus {
				@include oNormaliseFocusUnsetContent();
				& + .o-forms-input__label:before {// stylelint-disable-line selector-no-qualifying-type
					@include oNormaliseFocusContentInverse();
				}
			}

			// Unset :focus styles where :focus-visible is supported.
			// Ideally we would set `:focus-visible` by default and use
			// `@supports not selector(:focus-visible)` to provide a
			// `:focus` fallback, however some of our supported browsers
			// do not understand `@supports: selector()`.
			@supports selector(:focus-visible) {
				&:focus + .o-forms-input__label:before {// stylelint-disable-line selector-no-qualifying-type
					@include oNormaliseFocusUnsetContent();
				}

				&:focus-visible {
					& + .o-forms-input__label:before {// stylelint-disable-line selector-no-qualifying-type
						@include oNormaliseFocusContentInverse();
					}
				}
			}
		}
	}
}
