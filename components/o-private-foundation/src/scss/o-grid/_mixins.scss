
/// Apply styles at a given layout size (breakpoint) as the grid. It should be
// passed one of $o-pf-grid-layouts e.g. `S`, `M`, etc... depending on which layout
// size the style should apply at.
///
/// @example
///  // Turn the color of an element red at medium layout size and up
///  @include oGridRespondTo(M) {
///  	element {
///  		color: red;
///  	}
///  }
///  // Turn the color of an element blue until medium layout
///  element {
///  	@include oGridRespondTo($until: M) {
///  		color: blue;
///  	}
///  }
///  // Turn the color of an element green from small layout until medium layout
///  element {
///  	@include oGridRespondTo($from: S, $until: M) {
///  		color: green;
///  	}
///  }
///
/// @param {String} from - one of $o-pf-grid-layouts
/// @param {String} until - one of $o-pf-grid-layouts
@mixin oPrivateGridRespondTo($from: false, $until: false) {

	$grid-is-responsive: $_o-pf-grid-mode != 'fixed';
	@include mq(
		$from: $from,
		$until: $until,
		$responsive: $grid-is-responsive,
		$breakpoints: $o-pf-grid-layouts,
		$static-breakpoint: $o-pf-grid-fixed-layout
	) {
		@content;
	}
}

/// Base column styles and responsive layout width
///
/// @example scss Block has column styles
///   el { @include oGridColspan(); }
///
/// @example scss 4-column wide block
///   el { @include oGridColspan(4); }
///
/// @example scss Half-width block
///   el { @include oGridColspan(1/2); }
///
/// @example scss Block is full-width by default, 8-column wide on Medium layouts and hidden on Large layouts
///   el { @include oGridColspan((default: 12, M: 8, L: hide)); }
///
/// @param {Number | Map} $span [null]
@mixin oPrivateGridColspan($span: null, $width-only: false) {
	@if not $width-only {
		box-sizing: border-box;
		float: left;
		flex: 1 1 0%;
		position: relative; // Required for push and pull

		@if $_o-pf-grid-mode == 'fixed' {
			padding-left: oPrivateGridGutter($o-pf-grid-fixed-layout);
		} @else {
			@each $layout-name in map-keys($o-pf-grid-gutters) {
				@if $layout-name == 'default' {
					padding-left: oPrivateGridGutter();
				} @else {
					@include oGridRespondTo($layout-name) {
						padding-left: oPrivateGridGutter($layout-name);
					}
				}
			}
		}
	}
	@if $span {
		@include _oPrivateGridColumnWidth($span);
	}
}

/// Grid container
///
/// @param {String} $grid-mode [$_o-pf-grid-mode]
/// @param {Boolean} $bleed [false]
@mixin oPrivateGridContainer($grid-mode: $_o-pf-grid-mode, $bleed: false) {
	box-sizing: border-box;
	margin-left: auto;
	margin-right: auto;
	min-width: $_o-pf-grid-min-width;
	// Older browsers get a fixed-width layout
	max-width: oPrivateGridGetMaxWidthForLayout($o-pf-grid-fixed-layout);
	position: relative;

	@if $bleed {
		padding-left: 0;
		padding-right: 0;
	}

	@if $grid-mode == 'fixed' {
		// If the grid isn't fluid, we set it to a certain width
		width: oPrivateGridGetMaxWidthForLayout($o-pf-grid-fixed-layout, $grid-mode: 'fixed');
		@if not $bleed {
			padding-left: oPrivateGridGutter($o-pf-grid-fixed-layout);
			padding-right: oPrivateGridGutter($o-pf-grid-fixed-layout);
		}
	} @else {
		max-width: $_o-pf-grid-max-width;

		@each $layout-name in map-keys($o-pf-grid-gutters) {
			@if $layout-name == 'default' {
				@if not $bleed {
					padding-left: oPrivateGridGutter();
					padding-right: oPrivateGridGutter();
				}
			} @else {
				@include oGridRespondTo($layout-name) {
					@if not $bleed {
						padding-left: oPrivateGridGutter($layout-name);
						padding-right: oPrivateGridGutter($layout-name);
					}
				}
			}
		}

		@each $layout-name in $_o-pf-grid-layout-names {
			@if index($_o-pf-grid-layout-names, $layout-name) >= index($_o-pf-grid-layout-names, $_o-pf-grid-start-snappy-mode-at) {
				@include oPrivateGridRespondTo($layout-name) {
					@if $grid-mode == 'snappy' {
						max-width: map-get($o-pf-grid-layouts, $layout-name);
					}
					@if $grid-mode == 'fluid' {
						// If the grid mode is fluid, then use a class to make a row or a set of rows snappy
						.o-grid-snappy &,
						&--snappy {
							max-width: map-get($o-pf-grid-layouts, $layout-name);
						}
					}
				}
			}
		}
	}
}

/// Base row styles
@mixin oPrivateGridRow {
	clear: both;
	flex-wrap: wrap; // Note that this breaks in old Firefox
	display: flex;

	@media print {
		display: inherit;
	}

	@if $_o-pf-grid-mode == 'fixed' {
		margin-left: -1 * oPrivateGridGutter($o-pf-grid-fixed-layout);
	} @else {
		@each $layout-name in map-keys($o-pf-grid-gutters) {
			@if $layout-name == 'default' {
				margin-left: -1 * oPrivateGridGutter();
			} @else {
				@include oGridRespondTo($layout-name) {
					margin-left: -1 * oPrivateGridGutter($layout-name);
				}
			}
		}
	}

	// Clearfix for IE9 and below
	zoom: 1;

	&:before,
	&:after {
		content: '';
		display: table;
		display: flex; // stylelint-disable-line declaration-block-no-duplicate-properties
	}
	&:after {
		clear: both;
	}
}

/// Surface the layout currently displayed to make it readable in JS.
///
/// @example js
///  // your-app/main.js
///  // Return the current layout (e.g. default, S, M, L, XL)
///  import oGrid from 'o-grid';
///  let currentLayout = oGrid.getCurrentLayout();
///  console.log(currentLayout);
///
///  // Return the current gutter (e.g. 10px, 20px)
///  import oGrid from 'o-grid';
///  let currentGutter = oGrid.getCurrentGutter();
///  console.log(currentGutter);
@mixin oPrivateGridSurfaceCurrentLayout {
	html:after {
		content: '{ "layout": "default", "gutter": "' + oPrivateGridGutter() + '" }';
		display: none;

		@each $breakpoint in $_o-pf-grid-layout-names {
			@include oPrivateGridRespondTo($breakpoint) {
				content: '{ "layout": "' + $breakpoint + '", "gutter": "' + oPrivateGridGutter($breakpoint) + '" }';
			}
		}
	}
}

/// Fix a bug in Safari where items wouldn't wrap properly
/// Remove when Safari 10 support is no longer required.
/// @link https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrapping-flex-items
/// @access private
@mixin _oPrivateGridFixSafariWrap($args...) {
	flex-basis: oPrivateGridColspan($args...);
}

/// Cross browser column widths across layouts
///
/// @access private
///
/// @example scss
///   el { @include _oPrivateGridColumnWidth(4); }
///   el { @include _oPrivateGridColumnWidth(1/2); }
///   el { @include _oPrivateGridColumnWidth(hide); }
///   el { @include _oPrivateGridColumnWidth((default: 12, M: 8, L: hide)); }
///
/// @param {Number | Map} $span
@mixin _oPrivateGridColumnWidth($span) {
	// Special case: the column is hidden by default
	@if $span == 'hide' {
		display: none;
	} @else {
		// $span is a number or a keyword, so we're outputting the default width for that column
		@if type-of($span) == number or type-of($span) == string {

			// Restore visibility from `display: none`
			// if `data-o-grid-colspan` was set to `0` or `hide`
			display: block;

			// Define width in %
			@include _oPrivateGridFixSafariWrap($span); //stylelint-disable-line order/order
			min-width: oPrivateGridColspan($span);
			max-width: oPrivateGridColspan($span);
		}
	}

	// $span is a map, we're looping through all of the layouts
	@if type-of($span) == map {
		@each $layout-name, $layout-span in $span {
			@if $layout-name == 'default' {
				@include _oPrivateGridColumnWidth($layout-span);
			} @else {
				@if $layout-span == 'hide' {
					@include oPrivateGridRespondTo($layout-name) {
						display: none;
					}
				} @else {
					@include oPrivateGridRespondTo($layout-name) {
						// Restore visibility from `display: none`
						// if `data-o-grid-colspan` was set to `0` or `hide`
						display: block;
						// Define width in %
						@include _oPrivateGridFixSafariWrap($layout-span); // stylelint-disable-line order/order
						min-width: oPrivateGridColspan($layout-span);
						max-width: oPrivateGridColspan($layout-span);
					}
				}
			}
		}
	}
}
