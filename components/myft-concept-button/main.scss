@import '@financial-times/o-typography/main';
@import '@financial-times/o-normalise/main';

/// @access private
$_myftConceptButtonThemes: (
	standard: (
		background: oColorsByName('claret'),
		text: oColorsByName('white'),
		highlight: oColorsByName('claret-50'),
		pressed-highlight: rgba(oColorsByName('black'), 0.05),
		disabled: rgba(oColorsByName('black'), 0.5),
		focus-outline: oColorsByUsecase('focus', 'outline', $fallback: null),
	),
	inverse: (
		background: oColorsByName('white'),
		text: oColorsByName('claret'),
		highlight: rgba(white, 0.8),
		pressed-highlight: rgba(white, 0.2),
		disabled: rgba(oColorsByName('white'), 0.5),
		focus-outline: oColorsByName('white'),
	),
	opinion: (
		background: oColorsByName('oxford-40'),
		text: oColorsByName('white'),
		highlight: oColorsByName('oxford-30'),
		pressed-highlight: rgba(oColorsByName('oxford-40'), 0.2),
		disabled: rgba(oColorsByName('black'), 0.5),
		focus-outline: oColorsByUsecase('focus', 'outline', $fallback: null),
	),
	monochrome: (
		background: oColorsByName('white'),
		text: oColorsByName('black'),
		highlight: oColorsByName('white-80'),
		pressed-highlight: rgba(oColorsByName('white'), 0.2),
		disabled: rgba(oColorsByName('white'), 0.5),
		focus-outline: oColorsByName('white'),
	),
);

@function _myftConceptButtonGetThemeColor($key) {
	@return map-get($theme-map, $key);
}

@mixin _myftConceptButtonWithTheme($theme) {
	@if type-of($theme) == 'map' {
		$theme-map: $theme !global;
	} @else {
		$theme-map: map-get($_myftConceptButtonThemes, $theme) !global;
	}

	@content;

	// stylelint-disable order/order
	$theme-map: null !global;
}

@mixin _myftConceptButtonGetIcon($name, $color) {
	@include oIconsContent(
		$icon-name: $name,
		$size: 10,
		$color: $color,
		$iconset-version: 1
	);
	content: '';
}

@mixin _myftConceptButtonPlusIcon($color) {
	@include _myftConceptButtonGetIcon('plus', $color);
	background-size: 25px;
	margin: 0 6px -1px 0;
}

@mixin _myftConceptButtonTickIcon($color) {
	@include _myftConceptButtonGetIcon('tick', $color);
	background-size: 21px;
}

@mixin _myftConceptButtonIcon($theme: standard) {
	@include _myftConceptButtonWithTheme($theme) {
		&::before {
			@include _myftConceptButtonPlusIcon(
				_myftConceptButtonGetThemeColor(background)
			);
		}

		&[aria-pressed='true'] {
			&::before {
				@include _myftConceptButtonTickIcon(
					_myftConceptButtonGetThemeColor(text)
				);
			}
		}

		&[disabled],
		&[disabled]:hover {
			background: transparent;

			&::before {
				@include _myftConceptButtonPlusIcon(
					_myftConceptButtonGetThemeColor(disabled)
				);
				opacity: 0.5;
			}

			&[aria-pressed='true']::before {
				@include _myftConceptButtonTickIcon(
					_myftConceptButtonGetThemeColor(disabled)
				);
			}
		}
	}
}

@mixin _myftConceptButtonFocusOutlineColor($focus-color) {
	// Apply :focus styles as a fallback
	// These styles will be applied to all browsers that don't use the polyfill, this includes browsers which support the feature natively.
	body:not(.js-focus-visible) &,
	html:not(.js-focus-visible) & {
		// Standardise focus styles.
		&:focus {
			outline: 2px solid $focus-color;
		}
	}

	// When the focus-visible polyfill is applied `.js-focus-visible` is added to the html dom node
	// (the body node in v4 of the 3rd party polyfill)

	// stylelint-disable-next-line selector-no-qualifying-type
	body.js-focus-visible &, // stylelint-disable-next-line selector-no-qualifying-type
	html.js-focus-visible & {
		// Standardise focus styles.
		// stylelint-disable-next-line selector-no-qualifying-type
		&.focus-visible {
			outline: 2px solid $focus-color;
		}
		// Disable browser default focus style.
		// stylelint-disable-next-line selector-no-qualifying-type
		&:focus:not(.focus-visible) {
			outline: 0;
		}
	}

	// These styles will be ignored by browsers which do not recognise the :focus-visible selector (as per the third bullet point in https://www.w3.org/TR/selectors-3/#Conformance)
	// If a browser supports :focus-visible we unset the :focus styles that were applied above
	// (within the html:not(.js-focus-visible) block).
	&:focus-visible,
	body:not(.js-focus-visible) &:focus,
	html:not(.js-focus-visible) &:focus {
		outline: unset;
	}

	// Styles given :focus-visible support. Extra selectors needed to match
	// previous `:focus` selector specificity.
	body:not(.js-focus-visible) &:focus-visible,
	html:not(.js-focus-visible) &:focus-visible,
	&:focus-visible {
		outline: 2px solid $focus-color;
	}
}

@mixin _myftConceptButtonTheme($theme: standard, $with-toggle-icon: false) {
	@include _myftConceptButtonWithTheme($theme) {
		background-color: transparent;
		border: 1px solid _myftConceptButtonGetThemeColor(background);
		color: _myftConceptButtonGetThemeColor(background);

		@include _myftConceptButtonFocusOutlineColor(
			_myftConceptButtonGetThemeColor(focus-outline)
		);

		&:hover,
		&:focus {
			background-color: _myftConceptButtonGetThemeColor(pressed-highlight);
			border-color: _myftConceptButtonGetThemeColor(background);
			color: _myftConceptButtonGetThemeColor(background);
		}

		&[aria-pressed='true'] {
			background-color: _myftConceptButtonGetThemeColor(background);
			border: 1px solid _myftConceptButtonGetThemeColor(background);
			color: _myftConceptButtonGetThemeColor(text);

			&:hover,
			&:focus {
				background-color: _myftConceptButtonGetThemeColor(highlight);
				border-color: _myftConceptButtonGetThemeColor(highlight);
				color: _myftConceptButtonGetThemeColor(text);
			}
		}

		&[disabled]:hover,
		&[disabled] {
			background: transparent;
			border: 1px solid _myftConceptButtonGetThemeColor(disabled);
			color: _myftConceptButtonGetThemeColor(disabled);
		}
	}
}

@mixin _myftConceptButtonBase() {
	@include oTypographySans($weight: 'semibold', $scale: -1);
	border-radius: 100px;
	box-sizing: content-box;
	display: block;
	outline-offset: 2px;
	overflow: hidden;
	padding: 5px 12px;
	text-align: left;
	text-overflow: ellipsis;
	max-width: 15em;
	transition: border-color, background-color 0.5s ease;
	white-space: nowrap;
}

@mixin myftConceptButton(
	$themes: (
		'standard',
		'opinion',
		'inverse',
		'monochrome',
	)
) {
	.myft-concept-button,
	.myft-concept-button__button {
		@include _myftConceptButtonBase();
	}

	.myft-concept-button__announcement {
		@include oNormaliseVisuallyHidden();
	}

	@each $theme in map-keys($_myftConceptButtonThemes) {
		.myft-concept-button--#{$theme} {
			.myft-concept-button__button {
				@include _myftConceptButtonTheme($theme);
			}
			&.myft-concept-button--follow .myft-concept-button__button {
				@include _myftConceptButtonIcon($theme);
			}
		}
	}
}
