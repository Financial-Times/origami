////
/// @group o-share
/// @link http://registry.origami.ft.com/components/o-share
////

/// Generate base share styles
/// @param {String}
@mixin _oShareBase() {
	.o-share {
		display: inline-block;

		ul {
			margin: 0;
			padding: 0;
		}
	}

	.o-share__action {
		box-sizing: border-box;
		float: left;
		list-style-type: none;
		border: 1px solid oColorsByName('black-50');
		cursor: pointer;
	}

	.o-share__text {
		@include oNormaliseVisuallyHidden();
	}

	.o-share__icon {
		display: block;
		position: relative;
		top: -1px;
		left: -1px;
		border: 0;
		cursor: pointer;
		padding: 0;
		background-color: transparent;
		width: inherit;
		height: inherit;

		&:before {
			content: '';
			display: block;
			width: inherit;
			height: inherit;
		}

		// Increase the hit target to improve a11y
		&:after {
			position: absolute;
			display: block;
			content: '';
		}
	}

	// Include styles to size the share icons by default
	@include _oShareSize('default');
}

/// Icon
///
/// @param {String}  $name - Name of the icon
/// @param {String}  $classname [o-share] - base class name
/// @param {Boolean} $hover [true] - whether to output the hover styles
@mixin _oShareActionIcon($icon-name, $hover: true) {
	// sass-lint:disable-all
	$scheme: "ftsocial-v#{$o-share-social-icons-version}";

	@if (index($o-share-ft-icons-names, $icon-name)) {
		$scheme: "fticon-v#{$o-share-ft-icons-version}";
	}

	$service-url: "#{$o-share-image-service-base-url}/#{$o-share-image-service-version}/images/raw/#{$scheme}:#{$icon-name}";
	$query: "?source=o-share";

	$hover-color: oColorsByName('white');

	$hover-color: str-slice(ie-hex-str($hover-color), 4);
	$tint: "&tint=%23#{$hover-color},%23#{$hover-color}";

	.o-share__icon--#{$icon-name}:before {
		background-image: url($service-url + $query + "&format=svg");

		// Hack to load icon early to prevent FOIC on hover
		&:after {
			background-image: url($service-url + $query + "&format=svg#{$tint}");
		}
	}

	// Targets displays using any of Windowsâ€™ High Contrast Mode themes:
	// target all high-contrast themes and force a white icon with black background
	@media screen and (-ms-high-contrast: active) {
		$hover-color: oColorsByName('white');

		$hover-color: str-slice(ie-hex-str($hover-color), 4);
		$tint: "&tint=%23#{$hover-color},%23#{$hover-color}";

		.o-share__icon--#{$icon-name}:before {
			background-color: oColorsByName('black');
			background-image: url($service-url + $query + "&format=svg#{$tint}");
		}
	}

	.o-share__icon--#{$icon-name}:hover,
	.o-share__icon--#{$icon-name}:focus {
		$usecase: if(
			index($o-share-ft-icons-names, $icon-name),
			'o-share/ft-icon',
			'o-share/#{$icon-name}-icon'
		);
		border-color: oColorsByUsecase($usecase, 'border');
		background-color: oColorsByUsecase($usecase, 'background');
		&:before {
			background-image: url($service-url + $query + "&format=svg#{$tint}");
		}
	}
}

@mixin _oShareVertical() {
	.o-share--vertical {
		.o-share__action {
			float: none;
			margin-bottom: 5px;
		}
	}
}

@mixin _oShareInverse($icons) {
	.o-share--inverse {
		.o-share__action:not(:hover) {
			border: 1px solid rgba(oColorsByName('white'), 0.5);
		}

		@each $icon-name in $icons {

			// sass-lint:disable-all
			$scheme: "ftsocial-v#{$o-share-social-icons-version}";

			@if (index($o-share-ft-icons-names, $icon-name)) {
				$scheme: "fticon-v#{$o-share-ft-icons-version}";
			}

			$service-url: "#{$o-share-image-service-base-url}/#{$o-share-image-service-version}/images/raw/#{$scheme}:#{$icon-name}";
			$query: "?source=$system-code";

			$hover-color: oColorsByName('white');

			$hover-color: str-slice(ie-hex-str($hover-color), 4);
			$tint: "&tint=%23#{$hover-color},%23#{$hover-color}";

			.o-share__icon--#{$icon-name} {
				$usecase: if(
					index($o-share-ft-icons-names, $icon-name),
					'o-share/ft-icon',
					'o-share/#{$icon-name}-icon'
				);
				border-color: oColorsByUsecase($usecase, 'border');

				&:before {
					background-image: url($service-url + $query + "&format=svg#{$tint}");

					// Force the background to be black in high-contrast mode
					@media screen and (-ms-high-contrast: active) {
						background-color: oColorsByName('black');
					}
				}
			}
		}
	}
}

@mixin _oShareSize($size) {
	$sizes: (
		// default o-share size configuration
		// changes the margin size responsively
		'default': (
			'width': $o-share-icon-size,
			'breakpoint-to-margin': (
				'default': oSpacingByName('s1'),
				'S': oSpacingByName('s3')
			)
		),
		// small o-share size configuration
		'small': (
			'width': $o-share-icon-small-size,
			'breakpoint-to-margin': (
				'default': oSpacingByName('s3'),
			)
		)
	);

	// validate the size requested is supported (has configuration)
	$size-config: map-get($sizes, $size);
	@if not $size-config {
		@error '"#{$size}" is not an o-share size. Must be one of #{$size-options}';
	}

	// for the current variant get the width and margins per breakpoint
	$width: map-get($size-config, 'width');
	$margins: map-get($size-config, 'breakpoint-to-margin');

	// size the action element and set a margin
	.o-share__action {
		width: $width;
		height: $width;
		line-height: $width;
		margin: 0;
		@each $breakpoint, $margin in $margins {
			@include _oShareDefaultOrBreakpoint($breakpoint) {
				margin-right: $margin;
			}
		}
	}

	// size the icon element and set a margin
	.o-share__icon {
		&:after {
			@each $breakpoint, $margin in $margins {
				@include _oShareDefaultOrBreakpoint($breakpoint) {
					width: calc(100% + #{$margin});
					height: calc(100% + #{$margin});
					top: -#{$margin / 2};
					left: -#{$margin / 2};
				}
			}
		}
	}
}

@mixin _oShareDefaultOrBreakpoint($breakpoint) {
	@if $breakpoint == 'default' {
		@content;
	} @else {
		@include oGridRespondTo($breakpoint) {
			@content;
		}
	}
}
