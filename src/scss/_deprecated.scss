
/// Base overlay arrow styles
///
/// @param {String} direction - one of 'top', 'bottom', 'left' or 'right'
@mixin oOverlayArrow($direction) {
	@warn 'The mixin oOverlayArrow() is deprecated and will be removed in the
next major version. To get an overlay with an arrow, please use the
o-tooltip component';
	position: absolute;

	@if ($direction == 'top') {
		@include oOverlayUpArrow;
	} @else if ($direction == 'bottom') {
		@include oOverlayDownArrow;
	} @else if ($direction == 'left') {
		@include oOverlayLeftArrow;
	} @else if ($direction == 'right') {
		@include oOverlayRightArrow;
	}
}

/// Base arrow styling
///
/// @access private
///
/// @param {Number} size [10px] - Size of arrow
@mixin _oOverlayArrow($size: 10px) {
	// :before for the outer arrow that has the bordered colour, and :after for the inner arrow with the white background colour
	&:before,
	&:after {
		content: "";
		position: absolute;
		border: solid transparent;
	}
	&:before {
		// 1px offset so it appears properly
		border-width: $size + $_o-overlay-border-width + 1;
	}
	&:after {
		border-width: $size;
	}

	@include oEffectsShadowsElevation($elevation: 'high');
}

/// Base top/bottom arrow styling
///
/// @access private
///
/// @param {Number} size [10px] - Size of arrow
@mixin _oOverlayVerticalArrow($size: 10px) {
	@include _oOverlayArrow;

	&:before,
	&:after {
		left: 50%;
	}
	&:before {
		// 1px offset so it appears properly
		margin-left: -$size - $_o-overlay-border-width - 1;
	}
	&:after {
		margin-left: -$size;
	}
}

/// Top arrow styling
///
/// @param {Color} color [oColorsGetColorFor(o-overlay, border)]
@mixin oOverlayUpArrow($color: oColorsGetColorFor(o-overlay, border)) {
	@include _oOverlayVerticalArrow;

	&:before,
	&:after {
		bottom: 100%;
		border-top-width: 0;
	}
	&:before {
		border-bottom-color: $color;
	}
	&:after {
		border-bottom-color: oColorsGetColorFor(o-overlay, background);
	}
}

/// Bottom arrow styling
///
/// @param {Color} color [oColorsGetColorFor(o-overlay, border)]
@mixin oOverlayDownArrow($color: oColorsGetColorFor(o-overlay, border)) {
	@include _oOverlayVerticalArrow;

	&:before,
	&:after {
		top: 100%;
		border-bottom-width: 0;
	}
	&:before {
		border-top-color: $color;
	}
	&:after {
		border-top-color: oColorsGetColorFor(o-overlay, background);
	}
}

/// Base left/right arrow styling
///
/// @access private
///
/// @param {Number} size [10px] - Size of arrow
@mixin _oOverlayHorizontalArrow($size: 10px) {
	@include _oOverlayArrow;

	&:before,
	&:after {
		top: 50%;
	}
	&:before {
		// 1px offset so it appears properly
		margin-top: -$size - $_o-overlay-border-width - 1;
	}
	&:after {
		margin-top: -$size;
	}
}

/// Left arrow styling
///
/// @param {Color} color [oColorsGetColorFor(o-overlay, border)]
@mixin oOverlayLeftArrow($color: oColorsGetColorFor(o-overlay, border)) {
	@include _oOverlayHorizontalArrow;

	&:before,
	&:after {
		right: 100%;
		border-left-width: 0;
	}
	&:before {
		border-right-color: $color;
	}
	&:after {
		border-right-color: oColorsGetColorFor(o-overlay, background);
	}
}

/// Right arrow styling
///
/// @param {Color} color [oColorsGetColorFor(o-overlay, border)]
@mixin oOverlayRightArrow($color: oColorsGetColorFor(o-overlay, border)) {
	@include _oOverlayHorizontalArrow;

	&:before,
	&:after {
		left: 100%;
		border-right-width: 0;
	}
	&:before {
		border-left-color: $color;
	}
	&:after {
		border-left-color: oColorsGetColorFor(o-overlay, background);
	}
}

@mixin oOverlayCompactCloseIcon() {
	@warn 'The mixin oOverlayCompactCloseIcon() is deprecated and will be removed in the next major version';
}

%o-overlay {
	@include oOverlay;
}

%o-overlay-shadow {
	@include oOverlayShadow;
}

%o-overlay__arrow-top {
	@include oOverlayArrow($direction: top);
}

%o-overlay__arrow-bottom {
	@include oOverlayArrow($direction: bottom);
}

%o-overlay__arrow-left {
	@include oOverlayArrow($direction: left);
}

%o-overlay__arrow-right {
	@include oOverlayArrow($direction: right);
}

%o-overlay__heading {
	@include oOverlayHeading;
}

%o-overlay__title {
	@include oOverlayTitle;
}

%o-overlay__close {
	@include oOverlayClose;
}

%o-overlay__close-icon {
	@include oOverlayCloseIcon;
}

%o-overlay__heading--shaded {
	@include oOverlayHeadingShaded;

	%o-overlay__close {
		@include oOverlayHeadingShadedClose;
	}
}

%o-overlay__content {
	@include oOverlayContent;
}

%o-overlay--compact {
	%o-overlay__content {
		@include oOverlayCompactContent;
	}

	%o-overlay__heading {
		@include oOverlayCompactHeading;
	}

	%o-overlay__title {
		@include oOverlayCompactTitle;
	}

	%o-overlay__close {
		@include oOverlayCompactClose;
	}
}

%o-overlay--full-width {
	@include oOverlayFullscreen($fill: 'width');
}

%o-overlay--full-height {
	@include oOverlayFullscreen($fill: 'height');
}
