@include oColorsSetUseCase(o-typography-timestamp, text, 'black-60');
@include oColorsSetUseCase(o-typography-timestamp, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-headline, text, 'black-80');
@include oColorsSetUseCase(o-typography-headline, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-body, text, 'black-80');
@include oColorsSetUseCase(o-typography-body, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-standfirst, text, 'black-60');
@include oColorsSetUseCase(o-typography-standfirst, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-caption, text, 'black-80');
@include oColorsSetUseCase(o-typography-caption, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-list-prefix, text, 'black-80');
@include oColorsSetUseCase(o-typography-list-prefix, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-blockquote, border, 'claret');
@include oColorsSetUseCase(o-typography-author, text, 'black-80');
@include oColorsSetUseCase(o-typography-author, _deprecated, 'Please contact Origami if you need this usecase.');
@include oColorsSetUseCase(o-typography-author-hover, text, 'claret');
@include oColorsSetUseCase(o-typography-author-hover, _deprecated, 'Please contact Origami if you need this usecase.');

/// Outputs margin-top and/or margin-bottom based on multiples of
/// the baseline unit passed to the mixin
///
/// @param {Bool | Number} $top [false] - multiple of the baseline unit for top margin
/// @param {Bool | Number} $bottom [false] - multiple of the baseline unit for bottom margin
/// @deprecated Please use [o-spacing](https://github.com/Financial-Times/o-spacing) functions with standard CSS `margin` properties instead.
@mixin oTypographyMargin($top: false, $bottom: false) {
	$warn: _oTypographyWarnOnce('spacing-margin', 'oTypographyMargin is deprecated. Please use o-spacing instead.');

	@if $top {
		margin-top: oSpacingByIncrement($top);
	}

	@if $bottom {
		margin-bottom: oSpacingByIncrement($bottom);
	}
}

/// Outputs padding-top and/or padding-bottom based on multiples of
/// the baseline unit passed to the mixin
///
/// @param {Bool | Number} $top [false] - multiple of the baseline unit for top padding
/// @param {Bool | Number} $bottom [false] - multiple of the baseline unit for bottom padding
/// @deprecated Please use [o-spacing](https://github.com/Financial-Times/o-spacing) functions with standard CSS `padding` properties instead.
@mixin oTypographyPadding($top: false, $bottom: false) {
	$warn: _oTypographyWarnOnce('spacing-padding', 'oTypographyPadding is deprecated. Please use o-spacing instead.');

	@if $top {
		padding-top: oSpacingByIncrement($top);
	}

	@if $bottom {
		padding-bottom: oSpacingByIncrement($bottom);
	}
}

/// Returns a spacing size in px based on the baseline unit and number of units
/// passed to the function
///
/// @param {Number} $units [0] - multiple of the baseline unit
/// @returns {Number} size in px
/// @deprecated Please use [o-spacing](https://github.com/Financial-Times/o-spacing) instead.
@function oTypographySpacingSize($units: 0) {
	$warn: _oTypographyWarnOnce('spacing-size', 'oTypographySpacingSize is deprecated. Please use o-spacing instead.');
	@return _oTypographyAddUnit($units * $o-typography-baseline-unit);
}
