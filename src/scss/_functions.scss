////
/// @group o-colors
/// @link http://registry.origami.ft.com/components/o-colors
////

/// Return the CSS color for a palette colour name
///
/// @param {String} $name
@function oColorsGetPaletteColor($name) {
	@if (map-has-key($o-colors-palette, $name)) {
		@return map-get($o-colors-palette, $name);
	} @else {
		@warn "Color name '#{inspect($name)}' is not defined in the palette";
		@return null;
	}
}

/// Get a neutral colour based on the background context and base color
///
/// @param {Number} $percentage [60] - percentage opacity of the colour over the background
/// @param {String} $background [pink] - palette name of background color
/// @param {String} $color [black] - palette name of color
@function oColorsGetContrastedColor($percentage: 80, $background: 'pink', $color: 'black') {
	$context: $background;
	$base: $color;

	@if type-of($background) != color {
		$context: oColorsGetPaletteColor($background);
	}

	@if type-of($color) != color {
		$base: oColorsGetPaletteColor($color);
	}

	@return mix($base, $context, $percentage);
}

/// Return the defined palette colour name for a use case / property combination
///
/// @access private
///
/// @param {String} $usecase
/// @param {String} $property - 'text', 'background', 'border' or 'all'
@function _oColorsGetUseCase($usecase, $property) {
	@if (not map-has-key($o-colors-usecases, $usecase)) {
		@return null;
	}

	$props: map-get($o-colors-usecases, $usecase);

	$color: map-get($props, $property);

	@if ($color == null and $property != 'all') {
		$color: map-get($props, all);
	}

	@if (map-has-key($props, '_deprecated')) {
		@warn "Color use case '#{inspect($usecase)}' is deprecated (property '#{inspect($property)}' was requested): #{inspect(map-get($props, '_deprecated'))}";
	}

	@return $color;
}

/// Return the CSS colour name of the first defined use case in a prioritised list for a use case / property combination
///
/// @example scss
/// // Single use case:
/// body { color: oColorsGetColorFor(page, text); }
///
/// // Use case with one or multiple fallbacks:
/// // Use "my-box" color if available. If not, fall back to the "box" use case.
/// .box { background-color: oColorsGetColorFor(my-box box, background); }
///
/// // No specific property:
/// .money-wrapper { background-color: oColorsGetColorFor(section-money); }
/// .money-headline { color: oColorsGetColorFor(section-money); }
///
/// // Assign a different fallback if the use case doesn't exist
/// .foo { background-color: oColorsGetColorFor(foo, background, $options: ('default': 'pink-tint-1')); }
///
/// @param {list} $namelist
/// @param {String} $property [all]
/// @param {map} $options [('default': false)] - default: fallback value (false, null, or one of $o-colors-palette)
@function oColorsGetColorFor($namelist, $property: all, $options: ('default': false)) {
	$default: map-get($options, 'default');
	$color: null;

	@each $name in $namelist {
		@if ($color == null) {
			$color: _oColorsGetUseCase($name, $property);
		}
	}

	@if ($color == null) {
		@if ($default or $default == null) {
			@return $default;
		} @else {
			$warn: "Undefined use-case: can't resolve use case list '#{inspect($namelist)}'";

			@if ($property) {
				$warn: $warn + " for property '#{inspect($property)}'";
			}

			@warn $warn;
		}
	}

	@return oColorsGetPaletteColor($color);
}

/// Sets the correct color-palette and color-use-cases variables based on the
/// $o-colors-version value.
@function _oColorsSetVersion() {
	@if $o-colors-version == 1 {
		@warn "o-colors version 1 has been deprecated and will be removed in the next major release.";
		$o-colors-palette: map-merge($o-colors-palette-v1, $o-colors-palette) !global;
		$o-colors-usecases: map-merge($o-colors-usecases-v1, $o-colors-usecases) !global;
	} @else if $o-colors-version == 2 {
		$o-colors-palette: map-merge($o-colors-palette-v2, $o-colors-palette) !global;
		$o-colors-usecases: map-merge($o-colors-usecases-v2, $o-colors-usecases) !global;
	} @else {
		@return false;
	}

	@return true;
}

/// Returns a customised version of our shade-able colors defined in
/// $o-colors-shades
///
/// @param {String} $color - the name of the color to be shaded
/// @param {Number} $saturation - the saturation value of the new color
/// @param {Number} $brightness - the brightness value of the new color
@function oColorsGetColorShade($color, $saturation, $brightness) {
	$hue: null;

	@if(map-has-key($o-colors-shades, $color)) {
		$hue: map-get(map-get($o-colors-shades, $color), 'hue');
	} @else {
		$color-shades: map-keys($o-colors-shades);
		@error "It is not possible to use a shade of: #{$color}, please use one of: #{$color-shades} instead.";
	}

	@return _oColorsHSB($hue, $saturation, $brightness)
}

@function oColorsGetTextLevelPercentage($level, $background: default) {
	@if map-has-key($_o-colors-text-levels, $background) {
		@return map-get(map-get($_o-colors-text-levels, $background), $level);
	} @else {
		@return map-get(map-get($_o-colors-text-levels, 'default'), $level);
	}
}

@function oColorsGetTextBase($color) {
	@if oColorsColorBrightness($color) < 65% {
		@return 'white';
	} @else {
		@return 'black';
	}
}

@function oColorsGetTextColor($background, $level) {
	$baseColor: oColorsGetTextBase($background);
	$percentage: oColorsGetTextLevelPercentage($level, $background);

	@return oColorsGetContrastedColor($percentage, $background, $baseColor);
}

@function oColorsCheckContrast($col1, $col2) {
	$ratio: oColorsGetContrastRatio($col1, $col2);

	@if $ratio >= 4.5 {
		@return true;
	} @else if $ratio >= 3 {
		@warn "Caution: When using this colour combination, text should be larger than 18px to pass WCAG color contrast guidelines.";
	} @else {
		@warn "This color combination does not pass WCAG color contrast guidelines.";
	}

	@return false;
}

@function oColorsGetWCAGRating($col1, $col2) {
	$ratio: oColorsGetContrastRatio($col1, $col2);
	$WCAG-rating: 'fail';

	@if $ratio >= 7 {
		$WCAG-rating: 'AAA';
	} @else if $ratio >= 4.5 {
		$WCAG-rating: 'AA';
	} @else if $ratio >= 3 {
		$WCAG-rating: 'AA18';
	}

	@return $WCAG-rating;
}
