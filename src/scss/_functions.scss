////
/// @group o-colors
/// @link http://registry.origami.ft.com/components/o-colors
////

/// Return the CSS color for a palette color name
///
/// @param {String} $name
@function oColorsGetPaletteColor($name) {
	@if (map-has-key($o-colors-palette, inspect($name))) {
		$color: map-get($o-colors-palette, inspect($name));

		//check if it is deprecated
		@if type-of($color) == list {
			@if nth($color, 2) == '_deprecated' {
				@warn "#{$name} is deprecated for the #{$_o-colors-brand} palette, and will be removed in the next major.";
			}

			$color: nth($color, 1);
		}
		// Warn if an experimental palette color is being used.
		@if $_o-colors-experimental-palette-warning and map-has-key($_o-colors-experimental-palette, inspect($name)) {
			$_o-colors-experimental-palette-warning: false !global;
			@warn "Please note: The palette colors #{map-keys($_o-colors-experimental-palette)} are experimental and may be removed at any time. No action is required if you are not using these colors directly.";
		}

		@return $color;
	} @else if type-of($name) != color {
		@warn "Color name '#{inspect($name)}' is not defined in the palette.";
		@return null;
	} @else {
		@return $name;
	}
}

/// Returns a color based on the background context and base color
/// at the supplied percentage
///
/// @param {String} $background [paper] - palette name of background color
/// @param {String} $color [black] - palette name of color
/// @param {Number} $percentage [60] - percentage opacity of the color over the background
@function oColorsMix($color: 'black', $background: oColorsGetUseCase('page', 'background'), $percentage: 80) {
	$base: oColorsGetPaletteColor($background);
	$mixer: oColorsGetPaletteColor($color);

	@if type-of($base) != color {
		@return _error("'#{inspect($background)}' is not a valid base color.");
	} @else if type-of($mixer) != color {
		@return _error("'#{inspect($color)}' is not a valid mixing color.");
	} @else {
		@return mix($mixer, $base, $percentage);
	}
}

/// Return the defined palette color name for a use case / property combination
///
///
/// @param {String} $usecase
/// @param {String} $property - 'text', 'background', 'border' or 'all'
@function oColorsGetUseCase($usecase, $property) {
	@if (not map-has-key($o-colors-usecases, $usecase)) {
		@return null;
	}

	$props: map-get($o-colors-usecases, $usecase);

	$color: map-get($props, $property);

	@if ($color == null and $property != 'all') {
		$color: map-get($props, all);
	}

	@if (map-has-key($props, '_deprecated')) {
		@warn "Color use case '#{inspect($usecase)}' is deprecated (property '#{inspect($property)}' was requested): #{inspect(map-get($props, '_deprecated'))}";
	}

	@return $color;
}

/// Return the CSS color name of the first defined use case in a prioritised list for a use case / property combination
///
/// @example scss
/// // Single use case:
/// body { color: oColorsGetColorFor(page, text); }
///
/// // Use case with one or multiple fallbacks:
/// // Use "my-box" color if available. If not, fall back to the "box" use case.
/// .box { background-color: oColorsGetColorFor(my-box box, background); }
///
/// // No specific property:
/// .money-wrapper { background-color: oColorsGetColorFor(section-money); }
/// .money-headline { color: oColorsGetColorFor(section-money); }
///
/// // Assign a different fallback if the use case doesn't exist
/// .foo { background-color: oColorsGetColorFor(foo, background, $options: ('default': 'black-5')); }
///
/// @param {list} $namelist
/// @param {String} $property [all]
/// @param {map} $options [('default': false)] - default: fallback value (false, null, or oColorsGetPaletteColor($palette-color));
@function oColorsGetColorFor($namelist, $property: all, $options: ('default': false)) {
	$default: map-get($options, 'default');
	$color: null;

	@each $name in $namelist {
		@if ($color == null) {
			$color: oColorsGetUseCase($name, $property);
		}
	}

	@if ($color == null) {
		@if ($default or $default == null) {
			@return $default;
		} @else {
			$warn: "Undefined use-case: can't resolve use case list '#{inspect($namelist)}'";

			@if ($property) {
				$warn: $warn + " for property '#{inspect($property)}'";
			}

			@warn $warn;
		}
	}

	@return oColorsGetPaletteColor($color);
}

/// Returns a customised version of our shade-able colors defined in
/// $o-colors-tints
///
/// @param {String} $color - the name of the color to be shaded
/// @param {Number} $brightness - the brightness value of the new color
@function oColorsGetTint($color, $brightness) {
	$hue: null;
	$saturation: null;
	$mix: null;
	$newcolor: null;

	@if not (map-has-key($o-colors-tints, $color)) {
		$color-tints: map-keys($o-colors-tints);
		@return _error("It is not possible to use a tint of: #{$color}, please use one of: #{$color-tints} instead.");
	}

	@if (map-has-key(map-get($o-colors-tints, $color), 'hue')) {
		$hue: map-get(map-get($o-colors-tints, $color), 'hue');
		$saturation: map-get(map-get($o-colors-tints, $color), 'saturation');
		$newcolor: _oColorsHSB($hue, $saturation, $brightness);
	} @else {
		$newcolor: oColorsMix($color, $percentage: $brightness);
	}

	@return $newcolor;
}

/// Returns a text color based on the background and
/// an opacity percentage the color should appear at
///
/// @param {Color} $background - the hex color of the background the text will appear on
/// @param {Number} $opacity [100] - the opacity percentage the text color should appear at
@function oColorsGetTextColor($backgroundd, $opacity: 90) {
	$background: oColorsGetPaletteColor($backgroundd);

	@if $background == null or type-of($background) != color {
		@return _error("'#{inspect($background)}' is not a valid color. To get a text color, please supply a valid hex code or color name for the background color'");
	}

	$percentage: $opacity;
	$baseColor: _oColorsGetTextBase($background);
	$textColor: oColorsMix($baseColor, $background, $percentage);
	$testContrast: oColorsCheckContrast($textColor, $background, false);

	@if not $testContrast {
		$baseColor: if($baseColor == 'black', 'white', 'black');
		$textColor: oColorsMix($baseColor, $background, $percentage);
		$testContrast: oColorsCheckContrast($textColor, $background, false);
	}

	@if not $testContrast {
		@return _error("The combination of #{$opacity}% #{$baseColor} on #{$background} does not pass WCAG guidelines for color contrast.");
	} @else if $testContrast == 'large' {
		@warn "When using this combination (#{$opacity}% #{$baseColor} on #{$background}) please use a font size larger than 18px.";
	}

	@return $textColor;
}
