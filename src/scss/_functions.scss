// Return the CSS color for a palette colour name
 
@function oColorsGetPaletteColor($name) {
	@if (map-has-key($o-colors-palette, $name)) {
		@return map-get($o-colors-palette, $name);
	} @else {
		@warn "Color name '" + $name + "' is not defined in the palette";
		@return undefined;
	}
}

@function _oColorsGetPaletteColor($name) {
	@warn "_oColorsGetPaletteColor (with underscore prefix) is deprecated and will be removed in o-colors 3.x. Use oColorsGetPaletteColor() instead.";
	@return oColorsGetPaletteColor($name);
}

// Return the defined palette colour name for a use case / property combination

@function _oColorsGetUseCase($usecase, $property) {
	$props: map-get($o-colors-usecases, $usecase);
	@if ($props) {
		$color: map-get($props, $property);
		@if ($color == null and $property != 'all') {
			$color: map-get($props, all);
		}
		@if (map-has-key($props, '_deprecated')) {
			@warn "Color use case '" + $usecase + "' is deprecated (property '"+$property+"' was requested): " + map-get($props, '_deprecated');
		}
		@return $color;
   	}
	@return null;
}

// Return the CSS colour name of the first defined use case in a prioritised list for a use case / property combination

@function oColorsGetColorFor($namelist, $property: all, $options: ()) {
	$color: null;
	@each $name in $namelist {
		@if ($color == null) {
			$color: _oColorsGetUseCase($name, $property);
		}
	}
	@if ($color == null) {
		@if (map-has-key($options, default)) {
			@if (map-get($options, default) == undefined or map-get($options, default) == null) {
				@return map-get($options, default);
			} @else {
				$color: map-get($options, default);
			}
		} @else {
			$warn: "Undefined use-case: can\'t resolve use case list '" + $namelist + "'";
			@if ($property) {
				$warn: $warn + " for property '" + $property + "'";
			}
			@warn $warn;
			$color: transparent;
		}
	}
	@return oColorsGetPaletteColor($color);
}
