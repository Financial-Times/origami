////
/// @group o-colors
/// @link http://registry.origami.ft.com/components/o-colors
////

/// Return the CSS color for a palette color name.
///
/// @param {String} $color-name - The name of the colour to get.
/// @param {String} $from ['o-colors'] - Which component or project to get the colour from (optional).
@function oColorsByName($color-name, $from: 'o-colors') {
	// Validate arguments are strings.
	@if(type-of($color-name) != 'string') {
		@return _error('`$color-name` should be a string but found "#{inspect($color-name)}" of type "#{type-of($color-name)}".');
	}
	@if(type-of($from) != 'string') {
		@return _error('`$from` should be a string but found "#{inspect($from)}" of type "#{type-of($from)}".');
	}
	// Error when the color name is not found.
	// Get the namespaced color name.
	$namespaced-color-name: '#{$from}-#{$color-name}';
	$color-map: map-get($_o-colors-palette, $namespaced-color-name);
	@if (not $color-map) {
		@return _error('The color "#{inspect($color-name)}" set by "#{inspect($from)}" does not exist.');
	}

	// Get color details.
	$color: map-get($color-map, 'color');
	$meta: map-get($color-map, 'meta');

	// Output any deprecation notice.
	$deprecated: map-get($meta, 'deprecated');
	$already-warned: index($_o-colors-deprecation-warnings-output, $namespaced-color-name) != null;
	@if $deprecated and not $already-warned {
		$deprecation-message: 'The color "#{$color-name}" from "#{$from}" is deprecated for the "#{$_o-colors-brand}" palette, and will be removed in the next major.';
		// Append any custom deprecation message.
		$deprecation-message: if(type-of($deprecated) != 'string', $deprecation-message, $deprecation-message + ' ' + $deprecated);
		// Output warning.
		$_o-colors-deprecation-warnings-output: append($_o-colors-deprecation-warnings-output, $namespaced-color-name) !global;
		@warn $deprecation-message;
	}

	@return $color;
}

/// Return color names and the component/project name they're from.
/// @return {List} - A list of maps with palette color details e.g. `(('name': 'paper', 'from': 'o-colors'), ('name': 'storm', 'from': 'o-example'))`
@function oColorsGetPalette() {
	$public-palette-details: ();

	@each $name, $color-map in $_o-colors-palette {
		$details: (
			'name': map-get($color-map, 'name'),
			'from': map-get($color-map, 'from')
		);
		$public-palette-details: append($public-palette-details, $details);
	}

	@return $public-palette-details;
}

/// Returns a color based on the background context and base color
/// at the supplied percentage
///
/// @param {String} $background [paper] - palette name of background color
/// @param {String} $color [black] - palette name of color
/// @param {Number} $percentage [60] - percentage opacity of the color over the background
@function oColorsMix($color: 'black', $background: oColorsGetUseCase('page', 'background'), $percentage: 80) {
	$base: if(type-of($background) == 'string', oColorsByName($background), $background);
	$mixer: if(type-of($color) == 'string', oColorsByName($color), $color);

	@if type-of($base) != color {
		@return _error("'#{inspect($background)}' is not a valid base color.");
	} @else if type-of($mixer) != color {
		@return _error("'#{inspect($color)}' is not a valid mixing color.");
	} @else {
		@return mix($mixer, $base, $percentage);
	}
}

/// Return the defined palette color name for a use case / property combination
///
///
/// @param {String} $usecase
/// @param {String} $property - 'text', 'background', 'border', 'outline', or 'all'
@function oColorsGetUseCase($usecase, $property) {
	@if (not map-has-key($o-colors-usecases, $usecase)) {
		@return null;
	}

	$props: map-get($o-colors-usecases, $usecase);

	$color: map-get($props, $property);

	@if ($color == null and $property != 'all') {
		$color: map-get($props, all);
	}

	@if (map-has-key($props, '_deprecated')) {
		@warn "Color use case '#{inspect($usecase)}' is deprecated (property '#{inspect($property)}' was requested): #{inspect(map-get($props, '_deprecated'))}";
	}

	@return $color;
}

/// Return the CSS color name of the first defined use case in a prioritised list for a use case / property combination
///
/// @example scss
/// // Single use case:
/// body { color: oColorsGetColorFor(page, text); }
///
/// // Use case with one or multiple fallbacks:
/// // Use "my-box" color if available. If not, fall back to the "box" use case.
/// .box { background-color: oColorsGetColorFor(my-box box, background); }
///
/// // No specific property:
/// .money-wrapper { background-color: oColorsGetColorFor(section-money); }
/// .money-headline { color: oColorsGetColorFor(section-money); }
///
/// // Assign a different fallback if the use case doesn't exist
/// .foo { background-color: oColorsGetColorFor(foo, background, $options: ('default': 'black-5')); }
///
/// @param {list} $namelist
/// @param {String} $property [all]
/// @param {map} $options [('default': false)] - default: fallback value (false, null, or oColorsByName($palette-color));
/// @return {String|Color|Null}
@function oColorsGetColorFor($namelist, $property: all, $options: ('default': false)) {
	$default: map-get($options, 'default');
	$color: null;

	@each $name in $namelist {
		@if ($color == null) {
			$color: oColorsGetUseCase($name, $property);
		}
	}

	@if ($color == null and ($default or $default == null)) {
		@return $default;
	}

	@if($color == null and not index($_o-colors-ignore-usecases-warnings, $namelist)) {
		$warn: "Undefined use-case: can't resolve use case list '#{inspect($namelist)}'";
		@if ($property) {
			$warn: $warn + " for property '#{inspect($property)}'";
		}
		@warn $warn;
	}

	@return oColorsByName($color);
}

/// Returns a customised version of our shade-able colors defined in
/// $o-colors-tints
///
/// @param {String} $color - the name of the color to be shaded
/// @param {Number} $brightness - the brightness value of the new color
@function oColorsGetTint($color, $brightness) {
	$hue: null;
	$saturation: null;
	$mix: null;
	$newcolor: null;

	@if not (map-has-key($o-colors-tints, $color)) {
		$color-tints: map-keys($o-colors-tints);
		@return _error("It is not possible to use a tint of: #{$color}, please use one of: #{$color-tints} instead.");
	}

	@if (map-has-key(map-get($o-colors-tints, $color), 'hue')) {
		$hue: map-get(map-get($o-colors-tints, $color), 'hue');
		$saturation: map-get(map-get($o-colors-tints, $color), 'saturation');
		$newcolor: _oColorsHSB($hue, $saturation, $brightness);
	} @else {
		$newcolor: oColorsMix($color, $percentage: $brightness);
	}

	@return $newcolor;
}

/// Returns a text color based on the background and
/// an opacity percentage the color should appear at
///
/// @param {Color} $background - the hex color of the background the text will appear on
/// @param {Number} $opacity [100] - the opacity percentage the text color should appear at
/// @param {Boolean} $warnings [true] - whether this function should throw WCAG contrast check warnings/errors
@function oColorsGetTextColor($backgroundd, $opacity: 90, $warnings: true) {
	$background: if(type-of($backgroundd) == 'string', oColorsByName($backgroundd), $backgroundd);

	@if $background == null or type-of($background) != color {
		@return _error("'#{inspect($background)}' is not a valid color. To get a text color, please supply a valid hex code or color name for the background color'");
	}

	$percentage: $opacity;
	$baseColor: _oColorsGetTextBase($background);
	$textColor: oColorsMix($baseColor, $background, $percentage);
	$testContrast: oColorsCheckContrast($textColor, $background, false);

	@if not $testContrast {
		$baseColor: if($baseColor == 'black', 'white', 'black');
		$textColor: oColorsMix($baseColor, $background, $percentage);
		$testContrast: oColorsCheckContrast($textColor, $background, false);
	}

	@if not $testContrast and $warnings == true {
		@return _error("The combination of #{$opacity}% #{$baseColor} on #{$background} does not pass WCAG guidelines for color contrast.");
	}

	@if $testContrast == 'large' and $warnings == true {
		@warn "When using this combination (#{$opacity}% #{$baseColor} on #{$background}) please use a font size larger than 18px.";
	}

	@return $textColor;
}
