////
/// @group Use cases
/// @link http://registry.origami.ft.com/components/o-typography
////

/// Body text styles
@mixin oTypographyBody {
	@include oTypographySans(1);
	margin: 0 0 oSpacingByName('s2');
	color: oColorsGetColorFor('body', 'text');
}

/// Subscript text
@mixin oTypographySub {
	// make subscript smaller and sans-serif
	// 12px given 18px copy
	@include oTypographySans();
	font-size: 0.666em;
	// override o-normalise default
	position: static;
	vertical-align: sub;
	line-height: 0;
	// prevent sub increasing line-height
	display: inline-block;
	margin-bottom: -1em;
}

/// Superscript text
@mixin oTypographySuper {
	// make superscript smaller and sans-serif
	// 12px given 18px copy
	@include oTypographySans();
	font-size: 0.666em;
	// override o-normalise default
	position: static;
	vertical-align: super;
	line-height: 0;
	// prevent super increasing line-height
	display: inline-block;
	margin-top: -1em;
}

/// Output link styles.
///
/// @example Output the styles for a standard link.
///     .my-link {
///     	@include oTypographyLink();
///     }
///
/// @example Output the styles for an external link.
///     .my-external-link {
///     	@include oTypographyLink($external: true);
///     }
///
/// @example Output the styles for an external link, without repeating styles shared by standard links.
///     .my-link--external {
///     	@include oTypographyLink($external: true, $include-base-styles: false);
///     }
///
/// @example Output a custom, claret coloured link to go on the default background colour (paper for the master brand, white otherwise).
///     .my-claret-link {
///     	@include oTypographyLink($theme: (
///     		'base': 'claret',
///     		'hover': 'claret-30',
///     	));
///     }
///
/// @example Output a custom, lemon coloured link to go on a slate background.
///     .my-inverse-link {
///     	@include oTypographyLink($theme: (
///     		'base': 'lemon',
///     		'hover': 'lemon-30',
///     		'context': 'slate',
///     	));
///     }
///
/// @param {Boolean} $external [false] - If the style is for external links, set to true to output an external link icon.
/// @param {Map|Null} $theme [null] - A custom theme to change the look of a link, with colours for properties `base` (the main link colour), `hover` (the links over colour), and optional `context` key. Context is the colour the link will be placed on, it defaults to the page background (paper for the master brand, white otherwise).
/// @param {Boolean} $include-base-styles [true] - If set to false standard link styles will not be output, only additional styles required by a custom theme or external link.
@mixin oTypographyLink($external: false, $theme: null, $include-base-styles: true) {
	// Default link colours.
	// These may be `null` if the usecase is not set, i.e. for the whitelabel brand.
	$base-color: oColorsGetColorFor(link, text);
	$hover-color: oColorsGetColorFor(link-hover, text);
	$context-color: oColorsGetColorFor(page, background);

	// If a custom theme is given check it is a map with the required keys.
	// And update the link colours.
	$required-theme-keys: ('base', 'hover');
	@if($theme and type-of($theme) != 'map') {
		@error 'The link $theme argument must `null` or a map. ' +
		'Found: "#{inspect($theme)}"';
	}
	@if(type-of($theme) == 'map') {
		$theme-base: map-get($theme, 'base');
		$theme-hover: map-get($theme, 'hover');
		$theme-context: map-get($theme, 'context');
		@if(type-of($theme-base) != 'string') {
			@error 'A custom link theme must have a `base` property with a palette colour name e.g. `claret`. But found #{$theme-base}.';
		}
		@if(type-of($theme-hover) != 'string') {
			@error 'A custom link theme must have a `hover` property with a palette colour name e.g. `claret`. But found #{$theme-hover}.';
		}
		@if($theme-context and type-of($theme-context) != 'string') {
			@error 'A custom link theme may optionally have a `context` property with a palette colour name, to indicate the colour of the page behind the link, e.g. `null` or `paper`. But found #{$theme-context}.';
		}
		$base-color: oColorsGetPaletteColor($theme-base);
		$hover-color: oColorsGetPaletteColor($theme-hover);
		// theme context is optional, use the default if not set
		@if($theme-context) {
			$context-color: oColorsGetPaletteColor($theme-context);
		}
	}

	// Output external link styles.
	// Fallback to a black icon if no link colour is given.
	@if($external) {
		$icon-color: if($base-color, $base-color, oColorsGetPaletteColor('black'));
		$icon-padding: calc(1em + 0.5ch);
		@include oIconsGetIcon('outside-page', $icon-color, 24, $apply-base-styles: false, $apply-width-height: false, $iconset-version: 1);
		background-repeat: no-repeat;
		background-position-x: right;
		padding-right: $icon-padding;
		background-origin: border-box;
		// IE11 does not size and position the svg icon background correctly
		// using `background-size: contain`. Use @supports to exclude IE11,
		// as IE11 does not support @supports
		background-size: $icon-padding $icon-padding; // IE11 fallback
		@supports (background-size: contain) {
			background-size: contain;
		}
		&[target="_blank"]:after {
			@include oNormaliseVisuallyHidden();
			content: '(opens a new window)';
		}
	}

	// Output base styles shared by all links.
	@if($include-base-styles) {
		text-decoration: none;
		cursor: pointer;
		border-bottom: 2px solid;
	}

	// Output base styles shared by all links, or
	// required for a custom link theme.
	@if($include-base-styles or $theme) {
		color: $base-color;
		border-bottom-color: if($base-color, oColorsMix($base-color, $context-color, $percentage: 20), null);
	}

	&:hover {
		@if($include-base-styles or $theme) {
			color: $hover-color;
			border-bottom-color: if($base-color, oColorsMix($base-color, $context-color, $percentage: 40), null);
		}
	}

	// o-normalise provides extra focus styles for links
	&:focus {
		@if($include-base-styles) {
			border-bottom-color: transparent;
		}
		@if($include-base-styles or $theme) {
			color: $hover-color;
		}
	}
}

/// Output styles for lists.
/// Styles child `li` elements. Apply to a
/// containing list element such as `ul` or `ol`.
/// Does not output font styles, these are
/// inherited (@see oTypographyBody).
///
/// @example Output the styles for an unordered list.
///     .my-unordered-list {
///     	@include oTypographyList('unordered');
///     }
///
/// @example Output the styles for an ordered and unordered list, sharing base list styles.
///     .my-list {
///     	@include oTypographyList();
///     }
///
///     .my-list--ordered {
///     	@include oTypographyList('ordered', $include-base-styles: false);
///     }
///
///     .my-list--unordered {
///     	@include oTypographyList('unordered', $include-base-styles: false);
///     }
///
/// @param {String|Null} $type [null] - "ordered", "unordered", or null for just the base styles shared by all lists
/// @param {Boolean} $include-base-styles [true] - set to false to exclude base styles which are shared by all list types
@mixin oTypographyList($type: null, $include-base-styles: true) {
	// Undo browser defaults.
	@if($include-base-styles) {
		margin: 0;
		padding: 0;
		list-style: none;
	}
	// Reset number counter for new ordered list.
	@if($type == 'ordered') {
		counter-reset: item;
	}
	> li {
		// Undo browser defaults.
		@if($include-base-styles) {
			margin: 0;
		}
		&:before {
			// Allow space for 2-3 numbers for both ordered and unordered lists,
			// so content aligns between both list types. As an inline pseudo
			// element a longer count will push list content rather than overlap.
			@if($include-base-styles) {
				display: inline-block;
				box-sizing: border-box;
				min-width: 3ex;
				padding-right: oSpacingByName('s1');
			}

			@if($type == 'unordered') {
				content: '\2022'; // dot character
				color: inherit;
				transform: scale(1.778); // 32px dot character given a parent font-size of 18px
				transform-origin: center left;
				margin-left: -0.16ch; // remove kerning and align marker flush to the left
			}

			@if($type == 'ordered') {
				content: counter(item);
				counter-increment: item;
				font-feature-settings: "tnum";
				font-family: $o-typography-sans;
			}
		}
	}
}

/// Style for <footer> tags
/// @brand master
@mixin oTypographyFooter {
	@include oTypographySans($scale: 1, $line-height: 24px);
	color: oColorsGetColorFor('body', 'text');
}

/// Styles for photo or video credit/caption
/// @brand master
@mixin oTypographyCaption {
	@include oTypographySans($scale: -1);
	margin-top: oSpacingByName('s2');
	margin-bottom: 0;
	color: oColorsGetColorFor('body', 'text');
}

