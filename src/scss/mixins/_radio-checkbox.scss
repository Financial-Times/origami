////
/// @group Radio & Checkbox
////

/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @require {mixin} oFormsRadioCheckbox - The shared radio/checkbox styles must be output for this to build upon them.
/// @output Styles for radio inputs.
@mixin oFormsRadio($class: 'o-forms') {
    & + .#{$class}__label::before {
        // Equivalent to border-radius 50%. Fixes an old WebKit bug where rounding wouldn't be applied properly
        border-radius: 9999px;
    }
    &:checked + .#{$class}__label::before {
        // Outer ring changes to teal when the radio button is checked
        border: 1px solid _oFormsGet('checkbox-radio-checked-background');
    }
    & + .#{$class}__label::after {
        background-color: _oFormsGet('checkbox-radio-checked-background');
        // sass-lint:disable no-vendor-prefixes
        @media screen and (-ms-high-contrast: active) {
            background-color: windowText;
        }
        // sass-lint:enable no-vendor-prefixes
        // Equivalent to border-radius 50%. Fixes an old WebKit bug where rounding wouldn't be applied properly
        border-radius: 9999px;
        height: $_o-forms-radio-internal-default-size;
        width: $_o-forms-radio-internal-default-size;
        margin: $_o-forms-radio-internal-offset;
    }
}

/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @require {mixin} oFormsRadioCheckbox - The shared radio/checkbox styles must be output for this to build upon them.
/// @output Styles for checkbox inputs.
@mixin oFormsCheckbox($class: 'o-forms') {
    & + .#{$class}__label::after {
        @include oIconsGetIcon('tick', _oFormsGet('checkbox-radio-checked-icon'), $_o-forms-radiocheckbox-default-size);
        background-color: _oFormsGet('checkbox-radio-checked-background');
    }
    & + .#{$class}__label::before {
        background-color: _oFormsGet('field-standard-background');
    }
}

/// Draws a fake control (radio or checkbox) using pseudo-elements.
/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @output Shared styles of radio and checkbox inputs, including label changes.
@mixin oFormsRadioCheckbox($class: 'o-forms') {
    position: absolute;
    opacity: 0; // better than display: none as it allows tabbing

    & + .#{$class}__label {
        @include _oFormsRadioCheckboxLabel();
    }

    & + .#{$class}__label::before {
        border-color: _oFormsGet('focus-border');
        position: absolute;
        top: 0;
        left: 0;
        width: $_o-forms-radiocheckbox-default-size;
        height: $_o-forms-radiocheckbox-default-size;
        border: 1px solid _oFormsGet('field-standard-border');
        box-sizing: border-box;
        content: '';
        transition: all 0.1s ease-in;
    }

    &:focus + .#{$class}__label::before {
        @include oFormsCommonFieldFocus;
    }

    & + .#{$class}__label::after {
        content: '';
        opacity: 0;
        position: absolute;
        top: 0;
        left: 0;
        transition: 0.1s opacity ease-in;
    }

    &:checked + .#{$class}__label::after {
        opacity: 1;
    }

    &:disabled + .#{$class}__label {
        opacity: 0.4;
        cursor: default;
    }
}

/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @require {mixin} oFormsRadioCheckbox - The basic checkbox/radio styles must be output for these styles to modify.
/// @output Styles to position radio/checkbox inputs to the right of their label.
@mixin oFormsRadioCheckboxRight($class: 'o-forms') {
    & + .#{$class}__label {
        padding-right: $_o-forms-radiocheckbox-default-size + $_o-forms-label-padding-left;
        padding-left: 0;
        text-align: right;
    }

    & + .#{$class}__label::after,
    & + .#{$class}__label::before {
        right: 0;
        left: auto;
    }
}

/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @output Styles to wrap a group of checkboxes or a group of radios for purposes of positioning etc.
@mixin oFormsGroupContainer($class: 'o-forms') {
    margin-top: $_o-forms-checkbox-legend-spacing;

    // Stacked radios/checkboxes.
    .o-forms__toggle,
    input + .#{$class}__label {
        display: block;
        box-sizing: border-box;
        margin: $_o-forms-checkbox-vertical-spacing 0;
        &:first-of-type {
            margin-top: 0;
        }
        &:last-of-type {
            margin-bottom: 0;
        }
    }

    // Inline radios/checkboxes.
    // Half inline margins as inline margins do not collapse.
    $group-item-vertical-spacing: $_o-forms-checkbox-vertical-spacing / 2;
    &--inline {
        margin: #{-$group-item-vertical-spacing + $_o-forms-checkbox-legend-spacing} #{-$_o-forms-checkbox-horizontal-spacing} #{-$group-item-vertical-spacing} 0;
        max-width: 100%;
        .o-forms__toggle,
        input + .#{$class}__label {
            display: inline-block;
            width: auto;
            margin: $group-item-vertical-spacing $_o-forms-checkbox-horizontal-spacing $group-item-vertical-spacing 0;
            &:first-of-type {
                margin-top: $group-item-vertical-spacing;
            }
            &:last-of-type {
                margin-bottom: $group-item-vertical-spacing;
            }
        }
    }

    // Styled radio buttons are grouped inline and close together.
    &--inline-together {
        @supports (display: grid) {
            display: inline-grid;
            grid-auto-columns: 1fr;
            grid-auto-flow: column;
            overflow: hidden;
            width: max-content;
            max-width: 100%;
        }
        input + .#{$class}__label {
            @include _oFormsRadioButtonsStyledMargin();
            width: auto;
            float: left; // Float to support non-grid browsers.
        }
        // Float clearfix for non-grid browsers.
        &:after {
            content: "";
            display: table;
            clear: both;
        }
        @supports (display: grid) {
            &:after {
                display: none;
            }
        }
    }
}

/// @access private
/// @output Styles to modify checkbox/radio labels.
@mixin _oFormsRadioCheckboxLabel {
    @include oFormsGroupLabel();
    position: relative;
	user-select: none;
	cursor: pointer;
    // To align the text with the center of the checkbox/radio
    padding-top: 2px;
    padding-left: $_o-forms-radiocheckbox-default-size + $_o-forms-label-padding-left; // radio/checkboxes are being styled as pseudo-elements, which means we have to account for the width of the radio/checkboxes when adding padding to the labels
    min-height: $_o-forms-radiocheckbox-default-size;
}

/// @access public
/// @param {string} $class - The block level class name (BEM naming convention).
/// @output Styles for radios which look like a group of buttons, where one can be selected.
@mixin oFormsRadioButtonsStyled($class: 'o-forms') {
    // Output base radio button styles.
    @at-root #{selector_unify(input, &)} {
        @include oNormaliseVisuallyHidden;
    }
    @at-root #{selector_unify(a, &)},
    & + .#{$class}__label {
		@include oTypographySans($scale: -1, $line-height: 1);
        @include _oFormsRadioButtonsStyledMargin();
        cursor: pointer;
        font-weight: oFontsWeight('semibold');
        padding: $_o-forms-radio-styled-padding;
        min-height: $_o-forms-field-small-height;
        min-width: $_o-forms-radio-styled-button-min-width - $_o-forms-radio-styled-button-gap;
        box-sizing: border-box;
        position: relative;
        text-align: center;
        text-decoration: none;
        transition: $_o-forms-radio-styled-transition;
        display: inline-block;
        margin-top: $_o-forms-radio-styled-button-gap;
        margin-bottom: $_o-forms-radio-styled-button-gap;
        &:first-of-type {
            margin-left: $_o-forms-radio-styled-button-gap;
            border-left: 0;
        }
        &:last-of-type {
            margin-right: $_o-forms-radio-styled-button-gap;
        }
        &:before {
            content: '';
            position: absolute;
            top: -$_o-forms-radio-styled-button-gap;
            right: -$_o-forms-radio-styled-button-gap;
            bottom: -$_o-forms-radio-styled-button-gap;
            left: -$_o-forms-radio-styled-button-gap;
            border-left: 0;
            border-right: 0;
        }
    }
    @at-root #{selector_unify(a, &)}:focus,
    &:focus + .#{$class}__label {
        @include oFormsCommonFieldFocus;
        z-index: 1;
    }
    @at-root #{selector_unify(a, &)}:disabled,
    &:disabled + .#{$class}__label {
        opacity: 0.5;
        cursor: default;
        // Hack for odd border break with applied opacity.
        &:last-of-type {
            left: -1px;
            padding-left: $_o-forms-radio-styled-padding + 1;
            position: relative;
        }
    }
    // Output styles for the default radio button theme.
    @include oFormsRadioButtonsStyledTheme($class);
}

/// @access public
/// @example scss - Creating a custom theme, 'negative-checked-background' is optional.
/// .o-forms__radio-button--my-custom-theme {
///     @include oFormsRadioButtonsStyledTheme($theme: (
///         'checked-background': 'claret-80',
///         'negative-checked-background': 'claret-30',
///         'border': 'black-30'
///     ));
/// }
/// @param {string} $class - The block level class name (BEM naming convention).
/// @param {map|null} $theme - A custom theme map (see example).
/// @prop {string} $class.checked-background - An Origami color name e.g. "teal-50".
/// @prop {string} $class.border - An Origami color name for the border e.g. "black-30".
/// @prop {string} $class.negative-checked-background [$theme.checked-background] - An Origami color for negative choice radio buttons (optional).
/// @output Modifying theme styles for styled radio buttons.
@mixin oFormsRadioButtonsStyledTheme($class: 'o-forms', $theme: null) {
    $theme: _oFormsThemeToBrandVariants($theme);
    // Output theme
    // selector_unify is used to account for parent selectors.
    //
    // selector_unify('.example .o-forms__radio-button', 'a')
    // => .example a.o-forms__radio-button
    @at-root #{selector_unify(a, &)},
    & + .#{$class}__label {
        @include _oFormsRadioButtonsStyledMargin();
        color: _oFormsGet('radio-buttons-styled-text', $from: $theme);
        border-left: 1px solid _oFormsGet('radio-buttons-styled-border', $from: $theme);
        &:before {
            border: 1px solid _oFormsGet('radio-buttons-styled-border', $from: $theme);
            border-left: 0;
            border-right: 0;
        }
        &:last-of-type:before {
            border-right: 1px solid _oFormsGet('radio-buttons-styled-border', $from: $theme);
        }
        &:first-of-type:before {
            border-left: 1px solid _oFormsGet('radio-buttons-styled-border', $from: $theme);
        }
    }
    // sass-lint:disable space-after-colon
    @at-root #{selector_unify(a, &)}:not(:disabled):not(.#{$class}__radio-button--current):hover,
    &:not(:disabled):not(:checked) + .#{$class}__label:hover {
        background-color: rgba(_oFormsGet('checkbox-radio-hover-background', $from: $theme), 0.15);
    }
    @at-root #{selector_unify(a, &)}.#{$class}__radio-button--current,
    &:checked + .#{$class}__label {
        background-color: _oFormsGet('radio-buttons-styled-checked-background', $from: $theme);
        color: _oFormsGet('radio-buttons-styled-checked-text', $from: $theme);
    }
    @at-root #{selector_unify(a, &)}.#{$class}__radio-button--negative.#{$class}__radio-button--current,
    &--negative:checked + .#{$class}__label {
        background-color: _oFormsGet('radio-buttons-styled-negative-checked-background', $from: $theme);
    }
    // sass-lint:enable space-after-colon
}

/// @access public
/// @example scss - Adding an icon with a custom theme (optional). If a custom theme is passed, 'negative-checked-background' is optional.
/// .o-forms__radio-button--my-custom-icon {
/// 	@include oFormsRadioButtonsStyledIcon($icon-name: 'grid', $theme: (
/// 		'checked-background': 'claret-50',
/// 		'border': 'black-30',
/// 		'negative-checked-background': 'claret-80',
/// 	));
/// }
/// @param {string} $class - The block level class name (BEM naming convention).
/// @param {map|null} $theme - A custom theme map (optional, see example).
/// @output An icon for styled radio buttons.
@mixin oFormsRadioButtonsStyledIcon($icon-name, $theme: null, $class: 'o-forms') {
    $theme: _oFormsThemeToBrandVariants($theme);
    @at-root #{selector_unify(a, &)},
    & + .#{$class}__label {
        @include oIconsGetIcon(
            $icon-name: $icon-name,
            $apply-base-styles: false,
            $apply-width-height: false,
            $color: _oFormsGet('radio-buttons-styled-text', $from: $theme),
            $iconset-version: 1,
            $high-contrast-fallback: true
        );
        display: inline-block;
        background-repeat: no-repeat;
        background-position: 3px;
        background-size: $_o-forms-radio-styled-icon-size $_o-forms-radio-styled-icon-size;
        padding-left: $_o-forms-radio-styled-icon-padding;
        &:after {
            // Hack to download checked icon before checked, avoiding flash as icon loads.
            @include oIconsGetIcon(
                $icon-name: $icon-name,
                $apply-base-styles: false,
                $apply-width-height: false,
                $color: _oFormsGet('radio-buttons-styled-checked-text', $from: $theme),
                $iconset-version: 1,
                $high-contrast-fallback: false
            );
            content: '';
            display: none;
        }
    }
    @at-root #{selector_unify(a, &)}.#{$class}__radio-button--current,
    &:checked + .#{$class}__label {
        @include oIconsGetIcon(
            $icon-name: $icon-name,
            $apply-base-styles: false,
            $apply-width-height: false,
            $color: _oFormsGet('radio-buttons-styled-checked-text', $from: $theme),
            $iconset-version: 1,
            $high-contrast-fallback: true
        );
    }
}

/// Transforms a custom theme map into brand variables. See `_brand.scss`.
/// @access private
/// @param {map|null} $theme - A custom theme map.
/// @return {map} Brand variables.
@function _oFormsThemeToBrandVariants($theme) {
    @if $theme {
        // Error if required theme keys are not provided.
        $required-theme-keys: ('checked-background', 'border');
        @each $required-theme-key in $required-theme-keys {
            @if not index(map-keys($theme), $required-theme-key) {
                @error "oFormsRadioButtonsStyled custom theme is missing a '#{$required-theme-key}' key.";
            }
        }
        // Add default value for checked background if not specified.
        @if not map-get($theme, 'negative-checked-background') {
            $theme: map-merge($theme, (
                'negative-checked-background': map-get($theme, 'checked-background')
            ));
        }
        $theme: (
            radio-buttons-styled-text: oColorsGetPaletteColor(map-get($theme, 'checked-background')),
            radio-buttons-styled-border: oColorsGetPaletteColor(map-get($theme, 'border')),
            radio-buttons-styled-checked-text: oColorsGetTextColor(oColorsGetPaletteColor(map-get($theme, 'checked-background')), 100),
            radio-buttons-styled-checked-background: oColorsGetPaletteColor(map-get($theme, 'checked-background')),
            radio-buttons-styled-negative-checked-background: oColorsGetPaletteColor(map-get($theme, 'negative-checked-background')),
            checkbox-radio-hover-background: oColorsGetPaletteColor(map-get($theme, 'checked-background'))
        );
    }
    @return $theme;
}

/// Margins for styled button labels.
/// @access private
@mixin _oFormsRadioButtonsStyledMargin {
    margin: $_o-forms-radio-styled-button-gap 0;
    &:first-of-type {
        margin: $_o-forms-radio-styled-button-gap 0 $_o-forms-radio-styled-button-gap $_o-forms-radio-styled-button-gap;
    }
    &:last-of-type {
        margin: $_o-forms-radio-styled-button-gap $_o-forms-radio-styled-button-gap $_o-forms-radio-styled-button-gap 0;
    }
}

/// @access private
/// @param {string} $class - The block level class name (BEM naming convention).
/// @output Error styles for radio buttons.
@mixin _oFormsRadioButtonsStyledInvalid($class: 'o-forms') {
    & + .#{$class}__label {
        &:first-of-type:before,
        &:last-of-type:before,
        &:before {
            border-color: _oFormsGet('field-invalid-border');
        }
    }
}
