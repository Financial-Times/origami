/// Returns the web-safe HSLA color based on HSB/HSV values
///
/// @access private
///
/// @param {Number} $hue - number between 0-360
/// @param {Number} $saturation - number between 0-100
/// @param {Number} $brigthness - number between 0-100
/// @param {Number} $alpha [1] - number between 0-1
@function _oColorsHSB($hue, $saturation, $brightness, $alpha: 1) {
	@if $brightness == 0 {
		@return hsla(0, 0, 0, $alpha);
	} @else {
		$hsl-luminance: ($brightness/2) * (2 - ($saturation/100));
		$hsl-saturation: ($brightness * $saturation) / if($hsl-luminance < 50, $hsl-luminance * 2, 200 - $hsl-luminance * 2);

		@return hsla($hue, $hsl-saturation, $hsl-luminance, $alpha);
	}
}

/// Work out the brightness value in % of a color
///
/// @param {Color} $color - color value to get brightness from
/// From: https://gist.github.com/jlong/f06f5843104ee10006fe
@function oColorsColorBrightness($color) {
	$red-magic-number: 241;
	$green-magic-number: 691;
	$blue-magic-number: 68;

	$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

	// Extract color components
	$red-component: red($color);
	$green-component: green($color);
	$blue-component: blue($color);

	// Calculate a brightness value in 3d color space between 0 and 255
	$number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

	// Convert to percentage and return
	@return 100% * ($number / 255);
}

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// From: https://css-tricks.com/snippets/sass/luminance-color-function/
@function oColorsColorLuminance($color) {
	$colors: (
		'red': red($color),
		'green': green($color),
		'blue': blue($color)
	);

	@each $name, $value in $colors {
		$adjusted: 0;
		$value: $value / 255;

		@if $value < 0.03928 {
			$value: $value / 12.92;
		} @else {
			$value: ($value + 0.055) / 1.055;
			$value: pow($value, 2.4);
		}

		$colors: map-merge($colors, ($name: $value));
	}

	@return (map-get($colors, 'red') * 0.2126) + (map-get($colors, 'green') * 0.7152) + (map-get($colors, 'blue') * 0.0722);
}

/// Calculate the contrast ratio between two colors
///
/// @param {Color} $col1 - first color to compare
/// @param {Color} $col2 - second color to compare
/// Based on the JS in https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/contrast-ratio.js
@function oColorsGetContrastRatio($col1, $col2) {
	$l1: oColorsColorLuminance($col1) + 0.05;
	$l2: oColorsColorLuminance($col2) + 0.05;

	$ratio: $l1 / $l2;

	@if $l2 > $l1 {
		$ratio: 1 / $ratio;
	}

	$ratio: (round($ratio*10)/10);

	@return $ratio;
}
