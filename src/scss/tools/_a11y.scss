/// Return either white or black for the text base
/// depending on the background color
///
/// @param {String} $color - the name of the background color being used
@function _oColorsGetTextBase($color) {
	@if oColorsColorBrightness($color) < 65% {
		@return 'white';
	} @else {
		@return 'black';
	}
}

/// Checks the contrast ratio and returns the WCAG
/// rating, either AAA, AA, or AA18 meaning text should
/// be at least 18px
///
/// @param {Color} $col1 - first color to compare
/// @param {Color} $col2 - second color to compare
@function oColorsGetWCAGRating($col1, $col2) {
	$ratio: oColorsGetContrastRatio($col1, $col2);
	$wcag-rating: 'fail';

	@if $ratio >= 7 {
		$wcag-rating: 'AAA';
	} @else if $ratio >= 4.5 {
		$wcag-rating: 'AA';
	} @else if $ratio >= 3 {
		$wcag-rating: 'AA18';
	}

	@return $wcag-rating;
}

/// Checks the constrast of two colors and reports based on
/// WCAG guidelines for color contrast
///
/// @param {Color} $col1 - first color to compare
/// @param {Color} $col2 - second color to compare
/// @param {Boolean} $warnings - whether this function should throw warnings/errors or just return
@function oColorsCheckContrast($col1, $col2, $warnings: true) {
	$ratio: oColorsGetContrastRatio($col1, $col2);

	@if $ratio >= 4.5 {
		@return 'pass';
	} @else if $ratio >= 3 {
		@if $warnings { @warn "Caution: When using the combination of #{$col1} with #{$col2}, text should be larger than 18px to pass WCAG color contrast guidelines."; }
		@return 'large';
	}

	@if $warnings {
		@error "This combination of #{$col1} with #{$col2} does not pass WCAG color contrast guidelines.";
	}

	@return false;
}
