/// Outputs font-family, size and line-height, and progressive
/// font loading styles for Serif font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographySerif($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-serif, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Outputs font-family, size and line-height, and progressive
/// font loading styles for Display font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographyDisplay($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-display, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Outputs font-family, size and line-height, and progressive
/// font loading styles for Sans font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographySans($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-sans, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Outputs font-family, bold font-weight, size and line-height, and progressive
/// font loading styles for Display font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographyDisplayBold($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-display, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'weight': _oTypographyGetBoldWeight('display'),
		'progressive': $progressive
	));
}

/// Outputs font-family, bold font-weight, size and line-height, and progressive
/// font loading styles for Sans font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographySansBold($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-sans, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'weight': _oTypographyGetBoldWeight('sans'),
		'progressive': $progressive
	));
}

/// Outputs font-family, bold font-weight, size and line-height, and progressive
/// font loading styles for Serif font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographySerifBold($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-serif, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'weight': _oTypographyGetBoldWeight('serif'),
		'progressive': $progressive
	));
}

/// Outputs font-family, italic font-style, size and line-height, and progressive
/// font loading styles for Serif font
///
/// @param {Bool | Number} $scale [false] - number of the scale to use
/// @param {Bool | Number} $line-height [false] - line-height value to use instead of scale default
/// @param {Bool} $progressive [true] - whether to output progressive font loading styles
@mixin oTypographySerifItalic($scale: false, $line-height: false, $progressive: true) {
	@include _oTypographyFor($o-typography-serif, $opts: (
		'family': true,
		'scale': $scale,
		'custom-line-height': $line-height,
		'style': 'italic',
		'progressive': $progressive
	));
}

/// Output a typography for font
/// @param {String} $font - The font to output typography for.
/// @param {Map} $opts - What typography styles to output: family (boolean), scale (number -2 - 12), custom-line-height (e.g. 1em), weight (e.g. bold), style (e.g. italic), progressive (boolean).
/// @access private
@mixin _oTypographyFor($font, $opts: ()) {
	// Get options, null default.
	$family: map-get($opts, 'family');
	$scale: map-get($opts, 'scale');
	$custom-line-height: map-get($opts, 'custom-line-height');
	$weight: map-get($opts, 'weight');
	$style: map-get($opts, 'style');
	// Get options, true default.
	$progressive: if(map-has-key($opts, 'progressive'), map-get($opts, 'progressive'), true);

	// Check font variant is supported.
	$font-without-fallbacks: oFontsGetFontFamilyWithoutFallbacks($font);
	$variant-exists: oFontsVariantExists($font-without-fallbacks, $weight, $style);
	@if not $variant-exists {
		@error 'Font family "#{$font-without-fallbacks}" of weight "#{if($weight, $weight, 'regular')}" and style "#{if($style, $style, 'normal')}" is not supported.';
	}

	@if $family {
		font-family: if(type-of($font) == 'string', unquote($font), $font);
	}

	@if $scale {
		@include oTypographySize($scale: $scale, $line-height: $custom-line-height, $font: $font);
	} @else if $custom-line-height {
		line-height: _oTypographyAdjustUnit($custom-line-height);
	}

	@if $weight  {
		font-weight: oFontsWeight($weight);
	}

	@if $style  {
		font-style: unquote($style);
	}

	@if $progressive {
		@include oTypographyProgressiveFontFallback($font, $scale, $weight, $style);
	}
}
