/// Outputs typography styles for the Serif font.
/// Including: family, size, line-height, weight, style, and font sizes
/// for progressive font loading.
///
/// @example Output a font-family property only for the serif font.
/// 	@include oTypographySerif();
///
/// @example Output font-family, font-size, and line-height for the serif font.
/// 	@include oTypographySerif($scale: 1);
///
/// @example Output font-family, font-size, and line-height for the serif font. Set a custom line-height of 1.6.
/// 	@include oTypographySerif($scale: 1, $line-height: 1.6);
///
/// @example Output font-family, font-size, line-height, and font-weight for the serif font.
/// 	@include oTypographySerif($scale: 1, $weight: 'bold');
///
/// @example Output font-family, font-size, line-height, and font-style for the serif font.
/// 	@include oTypographySerif($scale: 1, $style: 'italic');
///
/// @example Output serif font properties without font-family.
/// 	@include oTypographySerif($scale: 1, $style: 'italic', $opts: ('font-family': false));
///
/// @example Output serif font properties without sizes for the fallback font (without progressive font loading).
/// 	@include oTypographySerif($scale: 1, $style: 'italic', $opts: ('progressive': false));
///
/// @param {Null | Number} $scale [null] - a scale number to output a font-size and line-height property
/// @param {Null | Number} $line-height [null] - custom line-height value to use instead of the scale's default
/// @param {Null | String} $weight [null] - output a font-weight property, e.g. 'bold', 'semibold'
/// @param {Null | String} $style [null] - output a font-style property, e.g. 'italic'
/// @param {Map} $opts [('font-family': true, 'progressive': true)] - a map of further options. Set a key `font-family` to false to not output a font-family property. Set a key `progressive` to false to not include alternative font sizes for progressive font loading.
@mixin oTypographySerif($scale: null, $line-height: null, $weight: null, $style: null, $opts: (
	'font-family': true,
	'progressive': true,
)) {
	$font-family: if(map-has-key($opts, 'font-family'), map-get($opts, 'font-family'), true);
	$progressive: if(map-has-key($opts, 'progressive'), map-get($opts, 'progressive'), true);

	@include _oTypographyFor($o-typography-serif, $opts: (
		'family': $font-family,
		'scale': $scale,
		'style': $style,
		'weight': $weight,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Outputs typography styles for the Display font.
/// Including: family, size, line-height, weight, style, and font sizes
/// for progressive font loading.
///
/// @example Output a font-family property only for the display font.
/// 	@include oTypographyDisplay();
///
/// @example Output font-family, font-size, and line-height for the display font.
/// 	@include oTypographyDisplay($scale: 1);
///
/// @example Output font-family, font-size, and line-height for the display font. Set a custom line-height of 1.6.
/// 	@include oTypographyDisplay($scale: 1, $line-height: 1.6);
///
/// @example Output font-family, font-size, line-height, and font-weight for the display font.
/// 	@include oTypographyDisplay($scale: 1, $weight: 'bold');
///
/// @example Output font-family, font-size, line-height, and font-style for the display font.
/// 	@include oTypographyDisplay($scale: 1, $style: 'italic');
///
/// @example Output display font properties without font-family.
/// 	@include oTypographyDisplay($scale: 1, $style: 'italic', $opts: ('font-family': false));
///
/// @example Output display font properties without sizes for the fallback font (without progressive font loading).
/// 	@include oTypographyDisplay($scale: 1, $style: 'italic', $opts: ('progressive': false));
///
/// @param {Null | Number} $scale [null] - a scale number to output a font-size and line-height property
/// @param {Null | Number} $line-height [null] - custom line-height value to use instead of the scale's default
/// @param {Null | String} $weight [null] - output a font-weight property, e.g. 'bold', 'semibold'
/// @param {Null | String} $style [null] - output a font-style property, e.g. 'italic'
/// @param {Map} $opts [('font-family': true, 'progressive': true)] - a map of further options. Set a key `font-family` to false to not output a font-family property. Set a key `progressive` to false to not include alternative font sizes for progressive font loading.
@mixin oTypographyDisplay($scale: null, $line-height: null, $weight: null, $style: null, $opts: (
	'font-family': true,
	'progressive': true,
)) {
	$font-family: if(map-has-key($opts, 'font-family'), map-get($opts, 'font-family'), true);
	$progressive: if(map-has-key($opts, 'progressive'), map-get($opts, 'progressive'), true);

	@include _oTypographyFor($o-typography-display, $opts: (
		'family': $font-family,
		'scale': $scale,
		'style': $style,
		'weight': $weight,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Outputs typography styles for the Sans font.
/// Including: family, size, line-height, weight, style, and font sizes
/// for progressive font loading.
///
///
/// @example Output a font-family property only for the sans font.
/// 	@include oTypographySans();
///
/// @example Output font-family, font-size, and line-height for the sans font.
/// 	@include oTypographySans($scale: 1);
///
/// @example Output font-family, font-size, and line-height for the sans font. Set a custom line-height of 1.6.
/// 	@include oTypographySans($scale: 1, $line-height: 1.6);
///
/// @example Output font-family, font-size, line-height, and font-weight for the sans font.
/// 	@include oTypographySans($scale: 1, $weight: 'bold');
///
/// @example Output font-family, font-size, line-height, and font-style for the sans font.
/// 	@include oTypographySans($scale: 1, $style: 'italic');
///
/// @example Output sans font properties without font-family.
/// 	@include oTypographySans($scale: 1, $style: 'italic', $opts: ('font-family': false));
///
/// @example Output sans font properties without sizes for the fallback font (without progressive font loading).
/// 	@include oTypographySans($scale: 1, $style: 'italic', $opts: ('progressive': false));
///
/// @param {Null | Number} $scale [null] - a scale number to output a font-size and line-height property
/// @param {Null | Number} $line-height [null] - custom line-height value to use instead of the scale's default
/// @param {Null | String} $weight [null] - output a font-weight property, e.g. 'bold', 'semibold'
/// @param {Null | String} $style [null] - output a font-style property, e.g. 'italic'
/// @param {Map} $opts [('font-family': true, 'progressive': true)] - a map of further options. Set a key `font-family` to false to not output a font-family property. Set a key `progressive` to false to not include alternative font sizes for progressive font loading.
@mixin oTypographySans($scale: null, $line-height: null, $weight: null, $style: null, $opts: (
	'font-family': true,
	'progressive': true,
)) {
	$font-family: if(map-has-key($opts, 'font-family'), map-get($opts, 'font-family'), true);
	$progressive: if(map-has-key($opts, 'progressive'), map-get($opts, 'progressive'), true);

	@include _oTypographyFor($o-typography-sans, $opts: (
		'family': $font-family,
		'scale': $scale,
		'style': $style,
		'weight': $weight,
		'custom-line-height': $line-height,
		'progressive': $progressive
	));
}

/// Output a typography for font
/// @param {String} $font - The font to output typography for.
/// @param {Map} $opts - What typography styles to output: family (boolean), scale (number -2 - 12), custom-line-height (e.g. 1em), weight (e.g. bold), style (e.g. italic), progressive (boolean).
/// @access private
@mixin _oTypographyFor($font, $opts: ()) {
	// Get options, null default.
	$family: map-get($opts, 'family');
	$scale: map-get($opts, 'scale');
	$custom-line-height: map-get($opts, 'custom-line-height');
	$weight: map-get($opts, 'weight');
	$style: map-get($opts, 'style');
	// Get options, true default.
	$progressive: if(map-has-key($opts, 'progressive'), map-get($opts, 'progressive'), true);

	// Check font variant is supported.
	$font-without-fallbacks: oFontsGetFontFamilyWithoutFallbacks($font);
	$variant-exists: oFontsVariantExists($font-without-fallbacks, $weight, $style);
	@if not $variant-exists {
		@error 'Font family "#{$font-without-fallbacks}" of weight "#{if($weight, $weight, 'regular')}" and style "#{if($style, $style, 'normal')}" is not supported.';
	}

	@if $family {
		font-family: if(type-of($font) == 'string', unquote($font), $font);
	}

	@if $scale {
		@include oTypographySize($scale: $scale, $line-height: $custom-line-height, $font: $font);
	} @else if $custom-line-height {
		line-height: _oTypographyAdjustUnit($custom-line-height);
	}

	@if $weight  {
		font-weight: oFontsWeight($weight);
	}

	@if $style  {
		font-style: unquote($style);
	}

	@if $progressive {
		@include _oTypographyProgressiveFontFallback($font, $scale, $weight, $style);
	}
}
