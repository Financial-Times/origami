/// Outputs tabs with a default theme 'secondary'.
/// @access public
@mixin oTabsButtonTabs() {
	.o-tabs--buttontabs[data-o-tabs--js] {
		&[role=tablist] {
			border-bottom: 1px solid _oTabsGetTablistBorderColor($theme: 'secondary');
			font-size: 0; // Hack to remove the spacing between tabs when using <li>'s
		}

		[role=tab] {
			@include oButtons($theme: 'secondary');
		}

		&.o-tabs--big [role=tab] {
			@include oButtonsSize('big');
		}

		[role=tab],
		&.o-tabs--big [role=tab] {
			border-bottom-width: 0;

			& + [role=tab] {
				margin-left: 0;
				border-left-width: 0;
			}

			&[aria-selected=true] a {
				font-weight: normal; // reset weight set in the base styles
			}

			&:first-child {
				border-left-width: 1px;
			}
		}
	}
}

/// Outputs a modifier class to theme tabs.
/// @access public
@mixin oTabsButtonTabsTheme($theme, $selector: true) {
	@if $selector {
		@warn '"oTabsButtonTabsTheme" has an argument `$selector` which has been deprecated.
				If true (default) a CSS selector is output e.g. ".o-tabs--primary".
				If false "oTabsButtonTabsTheme" must be wrapped in a custom selector.
				Please set this to false "oTabsButtonTabsTheme($theme, $selector: false)".
				See README for more information.';
	}

	// If the theme is not defined, i.e. is a custom theme map, set to null.
	$defined-theme: if(type-of($theme) != 'map', $theme, null);

	// Output defined theme or custom theme styles without a selector.
	@if not $selector {
		@include oBrandConfigureFor('o-tabs', $defined-theme) {
			@include _oTabsButtonTabsThemeStyles($theme);
		}
	}

	// Output defined theme styles with selector.
	// @deprecated To move inline with o-buttons `oButtonsTheme` this is deprecated.
	@if $selector and $defined-theme {
		$selector: _oTabsGetThemeSelector($theme, 'o-tabs');
		.#{$selector} {
			@include oBrandConfigureFor('o-tabs', $defined-theme) {
				@include _oTabsButtonTabsThemeStyles($theme);
			}
		}
	}
}

/// Styles to theme a button tabs.
/// @access private
@mixin _oTabsButtonTabsThemeStyles($theme) {
	&.o-tabs--buttontabs [role=tab] {
		@include oButtonsTheme($theme);
	}
	&.o-tabs--buttontabs[data-o-tabs--js][role=tablist] {
		border-bottom: 1px solid _oTabsGetTablistBorderColor($theme);
	}
}

/// Maps theme to class modifiers.
///
/// @example
///  _oTabsGetThemeSelector('primary') // o-tabs--primary
///  _oTabsGetThemeSelector('primary-inverse') // o-tabs--primary.o-tabs--inverse
///
/// @access private
/// @param {String} $theme - One of $o-tabs-themes
/// @param {String} $tab-class - The base button class e.g. o-tabs
/// @return {String} CSS class selector without leading `.` e.g. o-tabs.o-tabs--inverse
@function _oTabsGetThemeSelector($theme, $tab-class) {
	$theme-selector: '';
	@if length($theme) > 1 {
		@each $theme-part in $theme {
			$prepend: if($theme-selector == '', '', '#{$theme-selector}.');
			$theme-selector: '#{$prepend}#{$tab-class}--#{$theme-part}';
		}
	} @else {
		$theme-selector: '#{$tab-class}--#{$theme}';
	}
	@return $theme-selector;
}

/// Gets the tablist border color for a given theme.
/// @access private
/// @return {color}
@function _oTabsGetTablistBorderColor($theme) {
	$button-background: oButtonsGetColor($state: 'default', $property: 'background', $theme: $theme);
	$button-border: oButtonsGetColor($state: 'default', $property: 'border', $theme: $theme);
	$tablist-border: if($button-border and $button-border != transparent, $button-border, $button-background);
	@return $tablist-border;
}
