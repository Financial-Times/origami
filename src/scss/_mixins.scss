/**
 * Add a custom use case property
 */
@mixin oColorsSetUseCase($usecase, $property, $color) {
  $propmap: ($property: $color);
  @if (map-has-key($o-colors-usecases, $usecase)) {
    $propmap: map-merge(map-get($o-colors-usecases, $usecase), $propmap);
  }
  $newmap: ($usecase: $propmap);
  $o-colors-usecases: map-merge($o-colors-usecases, $newmap) !global;
}

/**
 * Output property declarations for all defined properties for the specified use case
 */
@mixin oColorsFor($useCaseList, $propertyList: all) {
  @if (oColorsGetColorFor($useCaseList, background, undefined) != undefined and ($propertyList == 'all' or index($propertyList, 'background'))) {
    background-color: oColorsGetColorFor($useCaseList, background);
  }
  @if (oColorsGetColorFor($useCaseList, text, undefined) != undefined and ($propertyList == 'all' or index($propertyList, 'text'))) {
    color: oColorsGetColorFor($useCaseList, text);
  }
  @if (oColorsGetColorFor($useCaseList, border, undefined) != undefined and ($propertyList == 'all' or index($propertyList, 'border'))) {
    border-color: oColorsGetColorFor($useCaseList, border);
  }
}
