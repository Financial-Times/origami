////
/// @group o-colors
/// @link http://registry.origami.ft.com/components/o-colors
////

/// Add a custom palette color
///
/// @example scss
///  @include oColorsSetColor('grey-tint20': #cccccc);
///
/// @param {String} $name - Name in the palette
/// @param {color} $color - Color (rgb, hex, hslâ€¦)
@mixin oColorsSetColor($name, $color) {
	$newcolor: ($name: $color);

	$o-colors-palette: map-merge($o-colors-palette, $newcolor) !global;
}

/// Add a custom use case property
///
/// @example scss
///  @include oColorsSetUseCase(email, text, 'grey-tint5');
///
/// @param {String} $usecase - Name of the use case
/// @param {String} $property - Property it applies to
/// @param {String} $color - One of $o-colors-palette
@mixin oColorsSetUseCase($usecase, $property, $color) {
	$propmap: ($property: $color);

	// The use-case already exists,
	// combine its existing properties with the new one
	@if (map-has-key($o-colors-usecases, $usecase)) {
		$propmap: map-merge(map-get($o-colors-usecases, $usecase), $propmap);
	}

	$newmap: ($usecase: $propmap);

	// Add the use-case and its properties to the global use-case map
	$o-colors-usecases: map-merge($o-colors-usecases, $newmap) !global;
}

/// Output property declarations for all defined properties for the specified use case
///
/// @example scss
///  .my-thing {
///  	@include oColorsFor(custom-box box);
///  }
///  .my-other-thing {
///  	@include oColorsFor(custom-box box, background border);
///  }
///
/// @param {String|list} $useCaseList
/// @param {String|list} $propertyList [all]
@mixin oColorsFor($useCaseList, $propertyList: all, $textLevel: 100) {
	// Fail silently when a use case doesn't exist,
	// taking advantage of how Sass treats the `null` keyword:
	//
	// 		$foo: null;
	// 		el { color: $foo; } // outputs nothing
	$args: (default: null);

	@if ($propertyList == 'all' or index($propertyList, 'background')) {
		background-color: oColorsGetColorFor($useCaseList, background, $options: $args);
	}
	@if ($propertyList == 'all' or index($propertyList, 'text')) {
		$useCaseTextColor: oColorsGetColorFor($useCaseList, text, $options: $args);
		$useCaseBackgroundColor: oColorsGetColorFor($useCaseList, background, $options: $args);

		// If no text color is defined but there is a background color for the use case
		@if $useCaseTextColor == null and $useCaseBackgroundColor != null {
			$useCaseTextColor: oColorsGetTextColor($useCaseBackgroundColor, $textLevel);
		}

		color: $useCaseTextColor;
	}
	@if ($propertyList == 'all' or index($propertyList, 'border')) {
		border-color: oColorsGetColorFor($useCaseList, border, $options: $args);
	}
}

/// Update the palette with calculated tints of
/// each color from $o-colors-tints
@mixin _oColorsSetPaletteTints {
	@each $color, $settings in $o-colors-tints {
		$hue: map-get($settings, 'hue');
		$tints: map-get($settings, 'tints');

		$saturation: null;

		@if map-has-key($settings, 'saturation') {
			$saturation: map-get($settings, 'saturation');
		}

		@if $tints != null {
			@each $value in $tints {
				$name: "#{$color}-#{$value}";
				$tint: null;

				@if $saturation == null {
					$tint: oColorsMix($color, $percentage: $value);
				} @else {
					$tint: _oColorsHSB($hue, $saturation, $value);
				}

				@include oColorsSetColor($name, $tint);
			}
		}
	}
}

/// Output all palette colors as CSS Variables
@mixin _oColorsCSSVariables {
	:root {
		@each $name, $hex in $o-colors-palette {
			#{--o-colors-}#{$name}: $hex;
		}
	}
}
