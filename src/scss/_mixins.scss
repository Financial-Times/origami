/// Output All oMessage Features
@mixin oMessage($class: $o-message-class, $types: 'all', $status: 'all') {
	@each $type in $types {
		@if $type == 'all' {
			@include oMessageAlerts($class, $type, $status);
			@include oMessageNotices($class, $type, $status);
			@include oMessageActions($class, $type, $status);

		} @else if index($o-message-alert-types, $type) {
			@include oMessageAlerts($class, $type, $status);

		} @else if index($o-message-notice-types, $type) {
			@include oMessageNotices($class, $type, $status);
		} @else if index($o-message-action-types, $type) {
			@include oMessageActions($class, $type, $status);

		} @else {
			@include _oMessageError("o-message types don't support #{$type}.
			The available types are:
			- action
			- alert
			- alert-bleed
			- alert-inner
			- notice
			- notice-bleed
			- notice-inner");
		}
	}
}


/// Message base
///
/// Outputs base styles for a Message
/// @param {String} $class  - base class for message

@mixin oMessageBase($class) {
	.#{$class} {
		.#{$class}__container {
			@include oMessageContainer;
		}
	}

	.#{$class}--closed {
		display: none;
	}
};

/// Message container
///
/// Outputs base layout for a message container
@mixin oMessageContainer () {
	@include oTypographySans($o-message-typography-scale);
	position: relative;
	// sass-lint:disable no-vendor-prefixes
	-webkit-font-smoothing: antialiased;
	// sass-lint:enable no-vendor-prefixes
}

/// Provide a component specific error message
///
/// @param {String} $message - The message to insert in the error.
@mixin _oMessageError($message) {
	@error '*** oMessage SCSS error: #{$message} ***';
};
