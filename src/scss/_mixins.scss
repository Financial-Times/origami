// Add a custom use case property

@mixin oColorsSetUseCase($usecase, $property, $color) {
  $propmap: ($property: $color);
  @if (map-has-key($o-colors-usecases, $usecase)) {
    $propmap: map-merge(map-get($o-colors-usecases, $usecase), $propmap);
  }
  $newmap: ($usecase: $propmap);
  $o-colors-usecases: map-merge($o-colors-usecases, $newmap) !global;
}

// Output property declarations for all defined properties for the specified use case

@mixin oColorsFor($useCaseList, $propertyList: all) {
  @if ($propertyList == 'all' or index($propertyList, 'background')) {
    $col: oColorsGetColorFor($useCaseList, background, (default:undefined));
    @if ($col != undefined) {
      background-color: $col;
    }
  }
  @if ($propertyList == 'all' or index($propertyList, 'text')) {
    $col: oColorsGetColorFor($useCaseList, text, (default:undefined));
    @if ($col != undefined) {
      color: $col;
    }
  }
  @if ($propertyList == 'all' or index($propertyList, 'border')) {
    $col: oColorsGetColorFor($useCaseList, border, (default:undefined));
    @if ($col != undefined) {
      border-color: oColorsGetColorFor($useCaseList, border);
    }
  }
}
