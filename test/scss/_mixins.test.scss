@include test-module('oBrandDefine') {
    @include test('Adds new brand variables to a global map') {
        // Reset defined brands for test.
        $original-brands: $_o-brands;
        $_o-brands: () !global;
        // Run test.
        $component1-brandmaster: (
            'variables': (
                example: blue
            ),
            'supports-variants': (
                'test',
                'example'
            )
        );
        $component1-brandinternal: (
            'variables': (
            ),
            'supports-variants': (
                'example'
            )
        );
        $component2-brandmaster: (
            'variables': (
                other: red
            ),
            'supports-variants': (
                'thing'
            )
        );
        $component2-brandinternal: (
            'variables': (
                other: white
            ),
            'supports-variants': (
            )
        );
        @include oBrandDefine('o-component1', 'master', $component1-brandmaster);
        @include oBrandDefine('o-component1', 'internal', $component1-brandinternal);
        @include oBrandDefine('o-component2', 'master', $component2-brandmaster);
        @include oBrandDefine('o-component2', 'internal', $component2-brandinternal);
        @include assert-equal(map-get($_o-brands, "o-component1"), (
            'master': $component1-brandmaster,
            'internal': $component1-brandinternal
        ));
        @include assert-equal(map-get($_o-brands, "o-component2"), (
            'master': $component2-brandmaster,
            'internal': $component2-brandinternal
        ));
        // Restore brands to pre-test state
        $_o-brands: $original-brands !global;
    }
}

@include test-module('oBrandGet') {
    @include test('Gets a default variable value for a defined brand') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background');
        @include assert-equal($property, white);
    }

    @include test('Concatenates multiple variables for use in one property value') {
        $property: oBrandGet($component: 'o-example', $variables: (example-border-width example-border-style example-border-color));
        @include assert-equal($property, 1px solid grey);
    }

    @include test('Gets a variable value from a variant') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background', $from: 'inverse');
        @include assert-equal($property, grey);
    }

    @include test('Gets a variable value from a custom variant') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background', $from: ('example-background': hotpink));
        @include assert-equal($property, hotpink);
    }

    @include test('Gets null from a variant with no variables defined') {
        $property: oBrandGet($component: 'o-example', $variables: 'example-background', $from: 'compact');
        @include assert-equal($property, null);
    }

    @include test('Gets variables from the default "master" brand if the current brand is not defined.') {
        // Set fake brand.
        $original-brand: $o-brand;
        $o-brand: 'non-existent-brand' !global;
        $property: oBrandGet($component: 'o-example', $variables: 'example-background');
        @include assert-equal($property, pink);
        // Restore brand after test.
        $o-brand: $original-brand !global;
    }
}

@include test-module('oBrandSupportsVariant') {
    @include test('Returns false if a brand does not support the variant') {
        $support: oBrandSupportsVariant($component: 'o-example', $variant: 'unsupported');
        @include assert-equal($support, false);
    }
    @include test('Returns true if a brand does support the variant') {
        $support: oBrandSupportsVariant($component: 'o-example', $variant: 'b2b');
        @include assert-equal($support, true);
    }
}
