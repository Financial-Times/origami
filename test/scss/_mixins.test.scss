
@include describe('oLabels mixins') {

	@include describe('_oLabelsBase') {
		@include it('subtracts border width from the padding values') {
			@include assert() {
				@include output($selector: false) {
					@include _oLabelsBase;
				};
				@include contains($selector: false) {
					$expected-vertical-padding: oTypographySpacingSize(1) - 1px;
					$expected-horizontal-padding: oTypographySpacingSize(2) - 1px;
					.o-labels {
						padding: $expected-vertical-padding $expected-horizontal-padding;
					}
				};
			};
		};
	};

	@include describe('_oLabelsSize') {
		@include describe('with $size set to "big"') {
			@include it('subtracts border width from the padding values') {
				@include assert() {
					@include output($selector: false) {
						@include _oLabelsSize('big');
					};
					@include contains($selector: false) {
						$expected-vertical-padding: oTypographySpacingSize(2) - 1px;
						$expected-horizontal-padding: oTypographySpacingSize(2) - 1px;
						.o-labels--big {
							padding: $expected-vertical-padding $expected-horizontal-padding;
						}
					};
				};
			};
		};
	};

	@include describe('_oLabelsSize') {
		@include describe('with $size set to "small"') {
			@include it('subtracts border width from the padding values') {
				@include assert() {
					@include output($selector: false) {
						@include _oLabelsSize('small');
					};
					@include contains($selector: false) {
						$expected-vertical-padding: 1px;
						$expected-horizontal-padding: 3px;
						.o-labels--small {
							padding: $expected-vertical-padding $expected-horizontal-padding;
						}
					};
				};
			};
		};
	};

	@include describe('oLabelsContent') {
		@include describe('with "size" and no "state"') {
			@include it('outputs label dimentions only') {
				@include assert() {
					@include output() {
						.o-example-label {
							@include oLabelsContent($opts: ('size': 'small'));
						}
					};
					@include expect() {
						.o-example-label {
    						font-size: 12px;
    						padding: 1px 3px;
						}
					};
				};
			};
		};
		@include describe('with "state" and no "size"') {
			@include it('outputs state styles only') {
				@include assert() {
					@include output() {
						.o-example-label {
							@include oLabelsContent($opts: ('state': 'content-commercial'));
						}
					};
					@include expect() {
						.o-example-label {
    						background-color: #008040;
    						color: white;
						}
					};
				};
			};
		};
		@include describe('with a custom "state" and no "size"') {
			@include it('outputs custom state styles only') {
				@include assert() {
					@include output() {
						.o-example-label {
							@include oLabelsContent($opts: ('state': (
								'background-color': hotpink
							)));
						}
					};
					@include expect() {
						.o-example-label {
    						background-color: hotpink;
    						color: black;
						}
					};
				};
			};
		};
		@include describe('with "state" and "size"') {
			@include it('outputs state and size styles') {
				@include assert() {
					@include output() {
						.o-example-label {
							@include oLabelsContent($opts: ('size': 'small', 'state': 'content-commercial'));
						}
					};
					@include expect() {
						.o-example-label {
    						background-color: #008040;
    						color: white;
    						font-size: 12px;
    						padding: 1px 3px;
						}
					};
				};
			};
		};
	};


};
