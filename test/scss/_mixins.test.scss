@include test-module('oTypographyDefineFontScale') {
    $custom-font-scale: (
        -2: (1, 1),
        -1: (2, 2),
        0: (3, 3),
        1: (4, 4),
        2: (5, 6),
        3: (6, 8),
        4: (8, 10),
        5: (10, 12),
        6: (12, 14),
        7: (14, 16),
        8: (16, 18),
        9: (18, 20),
        10: (20, 22)
    );
    @include test('Adds scale to font scale map.') {
        // Set custom scale for custom font.
        @include oTypographyDefineFontScale('MyFont, sans', $custom-font-scale);

        // The custom scale is added to the font scale map.
        @include assert-equal(
            $_o-typography-font-scale-by-font,
            (
                'MyFont': $custom-font-scale
            )
        );
    }
}

@include test-module('oTypographySetFont') {
    @include test('Updates the global variable for the sans font') {
        @include oFontsDefineCustomFont('system-ui', (
            (weight: semibold, style: normal),
            (weight: regular, style: normal),
            (weight: bold, style: normal)
        ));
        // Set sans font.
        @include oTypographySetFont(
            $type: 'sans',
            $family: 'system-ui'
        );
        @include assert-equal($o-typography-sans, 'system-ui');
    }

    @include test('Updates the global variable for the display font') {
        @include oFontsDefineCustomFont('MyDisplayFont, serif', (
            (weight: semibold, style: normal),
            (weight: regular, style: normal),
            (weight: bold, style: normal)
        ));
        // Set display font.
        @include oTypographySetFont(
            $type: 'display',
            $family: 'MyDisplayFont'
        );
        @include assert-equal($o-typography-display, 'MyDisplayFont');
    }
}


@include test-module('oTypographySize') {
    @include test('Includes a font size and line height for a given scale.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: 1);
            }
            @include expect {
                font-size: 18px;
                line-height: 20px;
            }
        }
    }

    @include test('Includes a font size and line height for a given responsive scale.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: (default: 1, L: 2));
            }
            @include expect {
                font-size: 18px;
                line-height: 20px;

                @media (min-width: 61.25em) {
                    font-size: 20px;
                    line-height: 24px;
                }
            }
        }
    }

    @include test('Includes a custom line height for a given scale.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: 1, $line-height: 1.4);
            }
            @include expect {
                font-size: 18px;
                line-height: 1.4;
            }
        }
    }

    @include test('Includes a custom line height for a responsive scale.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: (default: 1, L: 2), $line-height: 24px);
            }
            @include expect {
                font-size: 18px;
                line-height: 24px;

                @media (min-width: 61.25em) {
                    font-size: 20px;
                    line-height: 24px;
                }
            }
        }
    }

    @include test('Includes seperate custom line heights for each scale in a responsive scale.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: (default: (1, 18px), L: (2, 24px)));
            }
            @include expect {
                font-size: 18px;
                line-height: 18px;

                @media (min-width: 61.25em) {
                    font-size: 20px;
                    line-height: 24px;
                }
            }
        }
    }

    @include test('Priorities custom line heights in responsive scales.') {
        @include assert {
            @include output {
                @include oTypographySize($scale: (default: (1, 18px), L: 2), $line-height: 1.4);
            }
            @include expect {
                font-size: 18px;
                line-height: 18px;

                @media (min-width: 61.25em) {
                    font-size: 20px;
                    line-height: 1.4;
                }
            }
        }
    }
}

@include test-module('oTypographyLinkExternalIcon') {
    @include test('Colours according to the link colour usecase by default.') {
        @include assert {
            @include output {
                @include oTypographyLinkExternalIcon();
            }
            @include contains {
                &::after {
                    background-image: url("https://www.ft.com/__origami/service/image/v2/images/raw/fticon-v1:outside-page?source=o-icons&tint=%230D7680,%230D7680&format=svg");
                }
            }
        }
    }
    @include test('Defaults to black when no link colour usecase is set (i.e. whitelabel).') {
        @include assert {
            @include output {
                $original-palette: $o-colors-palette;
                $o-colors-palette: () !global;
                @include oTypographyLinkExternalIcon();
                $o-colors-palette: $original-palette !global;
            }
            @include contains {
                &::after {
                    background-image: url("https://www.ft.com/__origami/service/image/v2/images/raw/fticon-v1:outside-page?source=o-icons&format=svg");
                }
            }
        }
    }
    @include test('Allows a custom icon colour') {
        @include assert {
            @include output {
                @include oTypographyLinkExternalIcon(red);
            }
            @include contains {
                &::after {
                    background-image: url("https://www.ft.com/__origami/service/image/v2/images/raw/fticon-v1:outside-page?source=o-icons&tint=%23FF0000,%23FF0000&format=svg");
                }
            }
        }
    }
}

@include test-module('oTypographyBold') {
    @include test('Outputs the default font weight if not given a font type (the FinancierDisplayWeb bold weight for the master brand).') {
        @include assert {
            @include output {
                @include oTypographyBold();
            }
            @include contains {
                font-weight: 700;
            }
        }
    }
    @include test('Outputs the sans "bold" font weight of 600 (semibold).') {
        @include assert {
            @include output {
                @include oTypographyBold('sans');
            }
            @include contains {
                font-weight: 600;
            }
        }
    }
    @include test('Outputs the serif "bold" font weight.') {
        @include assert {
            @include output {
                @include oTypographyBold('serif');
            }
            @include contains {
                font-weight: 700;
            }
        }
    }
    @include test('Outputs the display "bold" font weight.') {
        @include assert {
            @include output {
                @include oTypographyBold('display');
            }
            @include contains {
                font-weight: 700;
            }
        }
    }
}

@include test-module('oTypographySansBold') {
    @include test('Outputs the sans "bold" font weight of 600 (semibold).') {
        @include assert {
            @include output {
                @include oTypographySansBold($scale: 1);
            }
            @include contains {
                font-weight: 600;
            }
        }
    }
}

@include test-module('oTypographySerifBold') {
    @include test('Outputs the serif "bold" font weight of 700 (bold).') {
        @include assert {
            @include output {
                @include oTypographySerifBold($scale: 1);
            }
            @include contains {
                font-weight: 700;
            }
        }
    }
}

@include test-module('oTypographyDisplayBold') {
    @include test('Outputs the display "bold" font weight of 700 (bold).') {
        @include assert {
            @include output {
                @include oTypographyDisplayBold($scale: 1);
            }
            @include contains {
                font-weight: 700;
            }
        }
    }
}
