(function () {
  // demos/src/shared/contrast-ratio.js
  function getWCAGRating(ratio, foreground, background) {
    var wcagRating;
    var message = "This combination passes WCAG color contrast guidelines";
    var combination = "<code>".concat(foreground, "</code> on <code>").concat(background, "</code>");

    if (ratio >= 7) {
      wcagRating = "AAA";
    } else if (ratio >= 4.5) {
      wcagRating = "AA";
    } else if (ratio >= 3) {
      wcagRating = "AA18";
      message = "Caution: When using this combination, text should be larger than 18px to pass WCAG color contrast guidelines.";
    } else {
      wcagRating = "Fail";
      message = "This combination does not pass WCAG color contrast guidelines.";
    }

    return {
      combination: combination,
      wcagRating: wcagRating,
      message: message
    };
  }

  function getContrastRatio(foreground, background) {
    var l1 = oColorsColorLuminance(foreground) + 0.05;
    var l2 = oColorsColorLuminance(background) + 0.05;
    var ratio = l1 / l2;

    if (l2 > l1) {
      ratio = 1 / ratio;
    }

    ratio = preciseFloor(ratio);
    return ratio;
  }

  function preciseFloor(number) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var multiplier = Math.pow(10, decimals);
    return Math.floor(number * multiplier) / multiplier;
  }

  function oColorsColorLuminance(hex) {
    hex = hex.trim() === "gray" ? "#808080" : hex;
    var hexValue = hex.replace("#", "").trim();
    var rgbPairs = hexValue.match(/.{1,2}/g);
    var decimals = rgbPairs.map(function (pair) {
      return parseInt(pair, 16);
    });
    var colors = {
      "red": decimals[0],
      "green": decimals[1],
      "blue": decimals[2]
    };
    Object.keys(colors).forEach(function (color) {
      colors[color] = colors[color] / 255;

      if (colors[color] < 0.03928) {
        colors[color] = colors[color] / 12.92;
      } else {
        colors[color] = (colors[color] + 0.055) / 1.055;
        colors[color] = Math.pow(colors[color], 2.4);
      }
    });
    return colors["red"] * 0.2126 + colors["green"] * 0.7152 + colors["blue"] * 0.0722;
  } // demos/src/shared/colors-mix.js


  var getHexValues = function getHexValues(mixer, base) {
    var root = getComputedStyle(document.documentElement);
    return {
      mixer: root.getPropertyValue("--o-colors-".concat(mixer)).replace(/^\s*#/, ""),
      base: root.getPropertyValue("--o-colors-".concat(base)).replace(/^\s*#/, "")
    };
  };

  var expandHexValues = function expandHexValues(value) {
    if (value.length === 3 || value.length === 4) {
      return value.split("").map(function (character) {
        return character + character;
      }).join("");
    }

    return value;
  };

  var mixHexes = function mixHexes(mixer, base) {
    var fullMixer = expandHexValues(mixer);
    var fullBase = expandHexValues(base);
    var radix = 16;

    var decimalToHex = function decimalToHex(decimal) {
      return decimal.toString(radix);
    };

    var hexToDecimal = function hexToDecimal(hex) {
      return parseInt(hex, radix);
    };

    var percentages = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
    return percentages.map(function (percent) {
      var hexValue = "#";

      for (var i = 0; i <= 5; i += 2) {
        var mixPair = hexToDecimal(fullMixer.substr(i, 2));
        var basePair = hexToDecimal(fullBase.substr(i, 2));
        var combinedPair = decimalToHex(Math.round(basePair + (mixPair - basePair) * (percent / 100)));

        while (combinedPair.length < 2) {
          combinedPair = "0".concat(combinedPair);
        }

        hexValue += combinedPair;
      }

      return hexValue;
    });
  }; // demos/src/contrast-checker/contrast-checker.js


  document.addEventListener("DOMContentLoaded", function () {
    var form = document.forms[0];
    var foreground = form["foreground"];
    var background = form["background"];
    form.addEventListener("change", function () {
      showContrastRatio(foreground, background);
    });
    showContrastRatio(foreground, background);
    document.querySelector(".trigger-input").addEventListener("click", function () {
      Origami["o-overlay"].getOverlays()["mixer-overlay"].open();
    });
  });

  function showContrastRatio(text, background) {
    var textHex = expandHexValues(changeColor(text.value, "foreground"));
    var backgroundHex = expandHexValues(changeColor(background.value, "background"));
    var ratio = getContrastRatio(textHex, backgroundHex);
    var rating = getWCAGRating(ratio, text.value, background.value);
    document.querySelector(".combination").innerHTML = rating.combination;
    document.querySelector(".contrast-ratio").innerHTML = "Contrast ratio: <strong>".concat(ratio, "</strong>");
    var ratingMessage = document.querySelector(".rating-message");
    ratingMessage.className = "rating-message rating-result--".concat(rating.wcagRating.toLowerCase());
    ratingMessage.innerHTML = rating.message;
    var wcagRating = document.querySelector(".wcag-rating");
    wcagRating.className = "wcag-rating rating-result--".concat(rating.wcagRating.toLowerCase());
    wcagRating.textContent = "WCAG ".concat(rating.wcagRating);
  }

  function changeColor(colorName, property) {
    var root = document.documentElement;
    var hexValue = getComputedStyle(root).getPropertyValue("--o-colors-".concat(colorName));

    if (hexValue.length <= 0) {
      hexValue = colorName;
    }

    root.style.setProperty("--".concat(property), hexValue);
    return hexValue.replace("#", "").trim();
  }

  var eventsAdded = false;
  document.addEventListener("oOverlay.ready", function () {
    generateRange();
    document.forms[0]["overlay-fieldset"].addEventListener("change", generateRange);

    if (!eventsAdded) {
      document.getElementById("add-mix").addEventListener("click", function () {
        var range = document.forms[0]["range"];
        addMixedSwatch("foreground", range.value);
        addMixedSwatch("background", range.value);
      });
      eventsAdded = true;
    }
  });

  var generateRange = function generateRange() {
    var form = document.forms[0];
    var hexes = getHexValues(form["mixer"].value, form["base"].value);
    var hexArray = mixHexes(hexes.mixer, hexes.base);
    var range = form["range"];
    hexArray.forEach(function (hex, index) {
      var input = range[index];
      input.style.backgroundColor = hex;
      input.setAttribute("value", hex);
    });
  };

  var addMixedSwatch = function addMixedSwatch(panelName, color) {
    var label = document.createElement("label");
    label.setAttribute("title", color);
    label.innerHTML = "\n\t\t<input type=\"radio\" name=\"".concat(panelName, "\" value=\"").concat(color, "\" style=\"background-color: ").concat(color, ";\"/>\n\t");
    document.forms[0][panelName][0].appendChild(label);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,