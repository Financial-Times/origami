(function () {
  // demos/src/shared/contrast-ratio.js
  function getContrastRatio(foreground, background) {
    var l1 = oColorsColorLuminance(foreground) + 0.05;
    var l2 = oColorsColorLuminance(background) + 0.05;
    var ratio = l1 / l2;

    if (l2 > l1) {
      ratio = 1 / ratio;
    }

    ratio = preciseFloor(ratio);
    return ratio;
  }

  function preciseFloor(number) {
    var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var multiplier = Math.pow(10, decimals);
    return Math.floor(number * multiplier) / multiplier;
  }

  function oColorsColorLuminance(hex) {
    hex = hex.trim() === "gray" ? "#808080" : hex;
    var hexValue = hex.replace("#", "").trim();
    var rgbPairs = hexValue.match(/.{1,2}/g);
    var decimals = rgbPairs.map(function (pair) {
      return parseInt(pair, 16);
    });
    var colors = {
      "red": decimals[0],
      "green": decimals[1],
      "blue": decimals[2]
    };
    Object.keys(colors).forEach(function (color) {
      colors[color] = colors[color] / 255;

      if (colors[color] < 0.03928) {
        colors[color] = colors[color] / 12.92;
      } else {
        colors[color] = (colors[color] + 0.055) / 1.055;
        colors[color] = Math.pow(colors[color], 2.4);
      }
    });
    return colors["red"] * 0.2126 + colors["green"] * 0.7152 + colors["blue"] * 0.0722;
  } // demos/src/shared/colors-mix.js


  var getHexValues = function getHexValues(mixer, base) {
    var root = getComputedStyle(document.documentElement);
    return {
      mixer: root.getPropertyValue("--o-colors-".concat(mixer)).replace(/^\s*#/, ""),
      base: root.getPropertyValue("--o-colors-".concat(base)).replace(/^\s*#/, "")
    };
  };

  var expandHexValues = function expandHexValues(value) {
    if (value.length === 3 || value.length === 4) {
      return value.split("").map(function (character) {
        return character + character;
      }).join("");
    }

    return value;
  };

  var mixHexes = function mixHexes(mixer, base) {
    var fullMixer = expandHexValues(mixer);
    var fullBase = expandHexValues(base);
    var radix = 16;

    var decimalToHex = function decimalToHex(decimal) {
      return decimal.toString(radix);
    };

    var hexToDecimal = function hexToDecimal(hex) {
      return parseInt(hex, radix);
    };

    var percentages = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
    return percentages.map(function (percent) {
      var hexValue = "#";

      for (var i = 0; i <= 5; i += 2) {
        var mixPair = hexToDecimal(fullMixer.substr(i, 2));
        var basePair = hexToDecimal(fullBase.substr(i, 2));
        var combinedPair = decimalToHex(Math.round(basePair + (mixPair - basePair) * (percent / 100)));

        while (combinedPair.length < 2) {
          combinedPair = "0".concat(combinedPair);
        }

        hexValue += combinedPair;
      }

      return hexValue;
    });
  }; // demos/src/color-mixer/color-mixer.js


  document.addEventListener("DOMContentLoaded", function () {
    var forms = document.forms;
    var mixer = forms[0]["mixer"];
    var base = forms[0]["base"];
    forms[0].addEventListener("change", function () {
      mixColors(mixer.value, base.value);
      var hex = document.querySelector("input[type=radio]:checked");
      var percent = hex.nextElementSibling.innerText.replace("%", "");
      fillCodeSnippets(hex.value, mixer.value, base.value, percent);
    });
    mixColors(mixer.value, base.value);
    forms[1]["range"][5].checked = true;
    var defaultHex = getComputedStyle(document.documentElement).getPropertyValue("--o-colors-".concat(mixer.value, "-50"));
    fillCodeSnippets(defaultHex, mixer.value, base.value, 50);
  });

  var checkTextContrast = function checkTextContrast(background) {
    var root = document.documentElement;
    var text = getComputedStyle(root).getPropertyValue("--color");
    var textColor = text === "#000000" ? "#000000" : "#f3f3f3";
    var ratio = getContrastRatio(textColor, background);

    if (ratio <= 3) {
      textColor = textColor === "#000000" ? "#f3f3f3" : "#000000";
      root.style.setProperty("--color", textColor);
    }
  };

  var mixColors = function mixColors() {
    var mixer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "black";
    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "paper";
    var root = document.documentElement;
    var hexes = getHexValues(mixer, base);
    root.style.setProperty("--background", "#".concat(hexes.base));
    var hexArray = mixHexes(hexes.mixer, hexes.base);
    fillSwatches(hexArray, mixer, base);
    checkTextContrast("#".concat(hexes.base));
  };

  var fillSwatches = function fillSwatches(hexes, mixer, base) {
    var range = document.forms[1]["range"];
    hexes.forEach(function (hex, index) {
      var swatch = range[index];
      swatch.style.backgroundColor = swatch.value = hex;
      swatch.addEventListener("click", function (e) {
        return fillCodeSnippets(e.target.value, mixer, base, index * 10);
      });
    });
  };

  var fillCodeSnippets = function fillCodeSnippets(hex, mixer, base, index) {
    document.getElementById("hex-value").innerText = hex.trim();
    document.getElementById("code-snippet").innerText = "oColorsMix(".concat(mixer, ", ").concat(base, ", ").concat(index, ")");
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,