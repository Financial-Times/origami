/// Icon Button
///
/// Outputs the CSS properties for an icon button for the given icon, theme and
/// size
///
/// @param {String} $icon-name, any icon name found in the fticons image set
/// http://registry.origami.ft.com/components/fticons
/// @param {String} $size, "big" or "default"
/// @param {String | Map} $theme, any theme name as defined in $o-buttons-themes
/// (primary, secondary, etc) or a Map defining a custom theme.
/// @param {Boolean} $is-icon-only, if this icon has text accompaniment or is an
/// icon only.
///
@mixin oButtonsIconButton($icon-name, $size: "default", $theme: "secondary", $is-icon-only: false) {
	@include oButtonsIconBaseStyles;
	@include _oButtonsIconSize($size);

	@if $is-icon-only {
		@include _oButtonsIconIconOnly;
	}

	@include _oButtonsIconBackgroundImage($icon-name, $theme);
}

/// Generate concrete classes icon buttons
///
/// Outputs background-image property for all icons in all themes except custom
/// themes.
/// This mixin will iterate through every theme in $o-buttons-themes and every
/// icon in $o-buttons-icons and create background images for each with the
/// following class structure:
/// ```
/// .o-buttons-icon.o-buttons--primary.o-buttons-icon--warning {...}
/// .o-buttons-icon.o-buttons--secondary.o-buttons-icon--warning {...}
/// .o-buttons-icon.o-buttons--inverse.o-buttons-icon--warning {...}
/// ... and so on...
/// ```
/// This mixin also styles for icon buttons where the .o-buttons--big class is present:
/// ```
/// .o-buttons-icon.o-buttons-big {...}
/// ```
@mixin _oButtonsGenerateIconButtons($o-buttons-class: $o-buttons-class) {

	.#{$o-buttons-class}-icon {
		@include oButtonsIconBaseStyles;
		@include _oButtonsIconSize('default');

		&.#{$o-buttons-class}--big {
			@include _oButtonsIconSize('big');
		}

		&.#{$o-buttons-class}-icon--icon-only {
			@include _oButtonsIconIconOnly;
		}
	}

	@each $key, $theme in $o-buttons-themes {
		$theme-selector: '&';
		@if $theme != 'secondary' {
			$theme-selector: '&.#{_oButtonsGetThemeSelector($theme, $o-buttons-class)}';
		}

		#{$theme-selector} {
			@each $icon-name in $o-buttons-icons {
				&.#{$o-buttons-class}-icon--#{$icon-name} {
					@include _oButtonsIconBackgroundImage($icon-name, $theme);
				}
			}
		}
	}
}

@mixin _oButtonsIconSize ($size) {
	@if $size == big {
		padding-left: 40px;
	} @else {
		padding-left: 22px;
	}
}

@mixin _oButtonsIconIconOnly {
	padding-left: 0;
	background-position: 50%;
	min-width: 40px;
}

/// oButtonsIconBackgroundImage
///
/// Outputs background image properties for icons in the different button states
/// for the set theme.
///
/// @param {String} $icon-name, any icon name found in o-ft-icons
/// @param {String} $theme, any theme name as defined in $o-buttons-themes (primary, secondary, etc). Custom themes not supported.
///
@mixin _oButtonsIconBackgroundImage($icon-name, $theme) {
	@include _oButtonsGetIconForThemeAndState($icon-name, $theme, 'normal');
	// Add fallback for MS High Contrast mode.
	// This only needs to be output once, not for every button state.
	// sass-lint:disable no-vendor-prefixes
	@media screen and (-ms-high-contrast: active) {
		@include oIconsGetIcon($icon-name: $icon-name, $apply-base-styles: false, $apply-width-height: false, $color: #ffffff, $iconset-version: 1, $high-contrast-fallback: false);
	}
	@media screen and (-ms-high-contrast: black-on-white) {
		@include oIconsGetIcon($icon-name: $icon-name, $apply-base-styles: false, $apply-width-height: false, $color: #000000, $iconset-version: 1, $high-contrast-fallback: false);
	}
	// sass-lint:enable no-vendor-prefixes

	// https://www.w3.org/TR/wai-aria-1.1/#aria-selected
	// https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
	&[aria-selected=true], // e.g. A selected tab or page number in pagination.
	&[aria-current], // e.g. A selected tab or page number in pagination (for links only).
	&[aria-pressed=true], // e.g. A "follow" button that is pressed.
	&:active {
		@include _oButtonsGetIconForThemeAndState($icon-name, $theme, 'active');
	}

	&:not([disabled]) {
		&:hover {
			@include _oButtonsGetIconForThemeAndState($icon-name, $theme, 'hover');
		}
		&:focus {
			@include _oButtonsGetIconForThemeAndState($icon-name, $theme, 'focus');
		}
	}

	// Hack to get the active state colour svg to download to prevent FOIC
	&:after {
		@include _oButtonsGetIconForThemeAndState($icon-name, $theme, 'active');
		content: '';
	}
}

/// Base styling for buttons
///
/// @param {String} $button-class, defaults to o-buttons ($o-buttons-class' default value)
@mixin oButtonsIconBaseStyles($buttonClass: $o-buttons-class) {
	display: inline-block;
	background-repeat: no-repeat;
	background-position: 3px;

	.#{$buttonClass}-icon__label {
		@include oButtonsIconButtonLabel;
	}
}

/// Request an icon from o-icons with color based on the o-buttons theme and state
///
/// @param {String} $icon-name, icon to request
/// @param {String|Map} $theme, one of $o-colors-theme or a custom theme map
/// @param {String} $state - One of normal, hover, focus, selected, disabled, pressed
@mixin _oButtonsGetIconForThemeAndState($icon-name, $theme, $state) {
	// 1. Get the icon color for the button state and theme.
	$icon-color: oButtonsGetColor($state, 'color', $theme);

	// 2. If the icon color is not a color assume it is in the palette.
	@if $icon-color and type-of($icon-color) != 'color' {
		$icon-color: oColorsGetPaletteColor($icon-color);
	}

	// 3. Output the icon.
	// 3.1. Output the icon placeholder if it has not been output before.
	$icon-color-id: str-slice('#{$icon-color}', 2);
	$icon-placeholder: 'o-buttons-#{$icon-name}-#{$icon-color-id}';
	@if index($_o-buttons-icon-placeholders, $icon-placeholder) == null {
		@at-root {
			%#{$icon-placeholder} {
				@include oIconsGetIcon($icon-name: $icon-name, $apply-base-styles: false, $apply-width-height: false, $color: $icon-color, $iconset-version: 1, $high-contrast-fallback: false);
			}
			$_o-buttons-icon-placeholders: append($_o-buttons-icon-placeholders, '#{$icon-name}-#{$icon-color}') !global;
		}
	}
	// 3.2. Extend the icon placeholder.
	@extend %#{$icon-placeholder}; // sass-lint:disable-line extends-before-declarations
}

/// Icon Button Label
///
/// Where an icon button is used, a span with an informative text label in should
/// be included so that if the styles don't load, the button will fallback to a text
/// label. This solution also works well for screen readers.
/// This mixin outputs the styles for visually hiding the label
///
@mixin oButtonsIconButtonLabel() {
	font-size: 0;
	height: 1px;
	overflow: hidden;
	display: block;
}
