/// Icon Button
///
/// Outputs styles for an icon button, for a given theme at a given size.
/// example:
/// .my-button--left-arrow {
///   @include oButtonsIcon(left-arrow, standout, medium);
/// }
///
/// @param {String} $icon-name, any icon name found in o-ft-icons
/// @param {String} $theme, any theme name as defined in $o-buttons-themes (standard, standout, etc). Defaults to null, which will output for the 'standard' theme
/// @param {String} $button-class, defaults to o-buttons ($o-buttons-class' default value)
///


@mixin oButtonsIcon($icon-name, $theme: standard, $buttonClass: $o-buttons-class) {
// Browserhack to only apply these styles for IE7 and up. IE6 will get the
// text fallback. Hack documented here: http://browserhacks.com/#hack-da690292d4fddd94dc7bdd50e38b5713
  html > body .#{$buttonClass}-icon {
    display:inline-block;
    background-repeat: no-repeat;
    background-position: 50%;

    .#{$buttonClass}-icon__label {
      @include _oButtonsIconButtonLabel();
    }

    &.#{$buttonClass}-icon--#{$icon-name} {

      @if $theme == 'standard' {
        $theme-selector: '&';
      } @else {
        $theme-selector: '&.#{$buttonClass}--#{$theme}';
      }
      #{$theme-selector} {

        $states: map-get($o-buttons-themes, $theme); // normal, active, hover, focus, pressedselected, disabled

        @if map-has-key($states, normal) {
          @include _oButtonsGetIconForThemeAndState($icon-name, $states, normal);
        }

        @if map-has-key($states, pressedselected) {
          // http://www.w3.org/TR/wai-aria/states_and_properties#aria-selected
          // http://www.w3.org/TR/wai-aria/states_and_properties#aria-pressed
    	    &[aria-selected=true], // e.g. A selected tab or page number in pagination
    	    &[aria-pressed=true] { // e.g. A "follow" button that is pressed
            @include _oButtonsGetIconForThemeAndState($icon-name, $states, pressedselected);
          }
        }

        @if map-has-key($states, disabled) {
          &[disabled] {
              @include _oButtonsGetIconForThemeAndState($icon-name, $states, disabled);
            }
        }


        &:not([disabled]) {
          @if map-has-key($states, hover) {
      	   &:focus:not(:hover),
      	      #{$o-hoverable-if-hover-enabled} &:hover {
                @include _oButtonsGetIconForThemeAndState($icon-name, $states, hover);
              }
            }
            @if map-has-key($states, active) {
  	           &:active {
                 @include _oButtonsGetIconForThemeAndState($icon-name, $states, active);
               }
             }

             @if map-has-key($states, focus) {
               &:focus:not(:active):not(:hover) {
                 @include _oButtonsGetIconForThemeAndState($icon-name, $states, focus);
               }
             }
           }


       }
     }
   }
 }

@mixin _oButtonsGetIconForThemeAndState($icon-name, $state-list, $state) {
  $properties: map-get($state-list, $state);
  $icon-color: map-get($properties, color);
  @if $icon-color != null {
    @include oFtIconsGetSvg($icon-name: $icon-name, $apply-base-styles: false, $color: $icon-color);
  }
}

@mixin _oButtonsIconButtonLabel(){
  font-size: 0;
  height: 1px;
  overflow: hidden;
  display: block;
}
