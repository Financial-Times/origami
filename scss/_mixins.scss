////
/// @group o-buttons
/// @link http://registry.origami.ft.com/components/o-buttons
////

/// Button construct
/// Basic button styling and default states for specific theme and size
///
/// @example Base styles
///  .my-button {
///  	@include oButtons;
///  }
/// @example Custom theme
///  .my-inverse-button {
///  	@include oButtons($theme: inverse);
///  }
/// @example Custom size
///  .my-big-button {
///  	@include oButtons(big);
///  }
/// @example Custom size and theme
///  .my-big-standout-button {
///  	@include oButtons(big, primary);
///  }
///
/// @param {String} $size (default)
/// @param {String} $theme (secondary)
@mixin oButtons($size: default, $theme: secondary) {
	display: inline-block;
	box-sizing: border-box;
	vertical-align: middle;
	margin: 0;
	border-style: solid;
	text-align: center;
	text-decoration: none;
	font-family: $o-buttons-font-family;
	font-weight: $o-buttons-font-weight;
	border-radius: $_o-buttons-border-radius;
	cursor: pointer;
	transition: 0.3s background-color, 0.15s color ease-out, 0.15s border-color ease-out;
	user-select: none;
	background-clip: border-box;
	// Prevent fat white type on a dark background
	// sass-lint:disable no-vendor-prefixes
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-moz-appearance: none;
	-webkit-appearance: none;
	// sass-lint:enable no-vendor-prefixes

	// sass-lint:disable mixins-before-declarations
	@include oButtonsSize($size);
	@include oButtonsTheme($theme);
	// sass-lint:enable mixins-before-declarations

	// Same as aria-disabled:
	// http://www.w3.org/TR/wai-aria/states_and_properties#aria-disabled
	// This is a common style for all button themes
	&[disabled] {
		pointer-events: none;
		opacity: 0.4;
		cursor: default;
	}
}

/// Button theme construct
/// Outputs styles for all button states
///
/// @example
/// .my-button--inverse {
/// 	@include oButtonsTheme($theme: 'inverse');
/// }
///
/// @example
/// .my-button--custom {
/// 	@include oButtonsTheme($theme: ($background: 'slate', $accent: 'lemon', $colorizer: 'primary'));
/// }
///
/// @param {String} $theme
@mixin oButtonsTheme($theme) {
	@if type-of($theme) == 'map' {
		// 1. If $theme is a map a custom theme is being used so override brand variables.
		$custom-config: _oButtonsThemeToBrandConfig($theme);
		@include oBrandOverride('o-buttons', $custom-config) {
			@include _oButtonsStates();
		}
	} @else {
		// 2. Otherwise the theme is defined as a brand variant.
		@include oBrandConfigureFor('o-buttons', $theme) {
			@include _oButtonsStates();
		}
	}
}

/// Styles for button states such as 'hover', 'focus', etc.
///
/// @private
@mixin _oButtonsStates() {
	@include _oButtonsColors('default');
	// https://www.w3.org/TR/wai-aria-1.1/#aria-selected
	// https://www.w3.org/TR/wai-aria-1.1/#aria-pressed
	&[aria-selected=true], // e.g. A selected tab or page number in pagination.
	&[aria-pressed=true], // e.g. A "follow" button that is pressed.
	&:not([disabled]):active {
		@include _oButtonsColors('active');
	}
	&:not([disabled]) {
		&:hover {
			@include _oButtonsColors('hover');
			text-decoration: none;
		}
		&:focus {
			@include _oButtonsColors('focus');
		}
	}
}

/// Output button colors for a given state.
/// If no value is found for a brand variant,
/// fallback to the default value for the state.
///
/// @param {String} $state
@mixin _oButtonsColors($state) {
	background-color: oButtonsGetColor($state, 'background');
	color: oButtonsGetColor($state, 'color');
	border-color: oButtonsGetColor($state, 'border');
}

/// Transform custom button theme map into oBrand config.
///
/// @param {Map} $theme
/// @return {Map} oBrand configuration for the custom theme
@function _oButtonsThemeToBrandConfig($theme) {
	@if type-of($theme) != 'map' {
		@error 'Expecting custom button theme `$theme` to be a map.';
	}

	@if not map-has-key($theme, "accent") {
		@error "Please provide an accent color for the custom button theme";
	}

	@if not map-has-key($theme, "background") {
		@error "Please provide a background color for the custom button theme";
	}

	// If theme colorizer is not supported default to secondary.
	$supported-colorizers: ('secondary', 'primary');
	@if not index($supported-colorizers, map-get($theme, "colorizer")) {
		$theme: map-merge($theme, ('colorizer': 'secondary'));
	}

	$colorizer: map-get($theme, 'colorizer');
	$background: map-get($theme, 'background');
	$accent: map-get($theme, 'accent');

	@return ('variables': (
		default-color: if($colorizer == 'secondary', oColorsGetPaletteColor($accent), oColorsGetPaletteColor($background)),
		default-background: if($colorizer == 'secondary', oColorsGetPaletteColor($background), oColorsGetPaletteColor($accent)),
		default-border: oColorsGetPaletteColor($accent),
		hover-background: oColorsMix($background, $accent),
		hover-color: oColorsGetPaletteColor($accent),
		focus-background: if($colorizer == 'secondary', transparent, oColorsGetPaletteColor($accent)),
		active-color: oColorsGetPaletteColor($background),
		active-background: oColorsGetPaletteColor($accent)
	));
}

/// Button size
/// Outputs dimensions for a specific button size
///
/// @example
/// .my-button--big {
/// 	@include oButtonsSize(big);
/// }
///
/// @param {String} $size
@mixin oButtonsSize($size) {
	$button-dimensions: map-get($o-buttons-sizes, $size);
	$border-width: map-get($button-dimensions, border-width);
	$vertical-padding: 1/2 * (map-get($button-dimensions, min-height) - map-get($button-dimensions, font-size)) - $border-width;
	$background-size: map-get($button-dimensions, background-size);

	background-size: $background-size $background-size;
	min-height: map-get($button-dimensions, min-height);
	min-width: map-get($button-dimensions, min-width);
	padding: $vertical-padding map-get($button-dimensions, padding-right) $vertical-padding map-get($button-dimensions, padding-left);
	font-size: map-get($button-dimensions, font-size);
	line-height: map-get($button-dimensions, min-height) - $border-width * 2 - $vertical-padding * 2;
	border-width: $border-width;
}
