/// Check if a theme has a certain state
///
/// @param {String} $theme - One of $o-buttons-themes
/// @param {String} $state - One of normal, hover, focus, selected, disabled, pressed
@function _oButtonsThemeHasState($theme, $state) {
	$states: map-get($o-buttons-themes, $theme);
	@if type-of($states) == map {
		@return map-has-key($states, $state);
	} @else {
		@return false;
	}
}

/// Check if a state has a property
///
/// @example
///  @if _oButtonsStateHasProperty(standout, focus, color) {}
///
/// @param {String} $theme - One of $o-buttons-themes
/// @param {String} $state - One of normal, hover, focus, selected, disabled, pressed
/// @param {String} $property - CSS property name
@function _oButtonsStateHasProperty($theme, $state, $property) {
	$states: map-get($o-buttons-themes, $theme);
	$properties: map-get($states, $state);

	@if type-of($properties) == map {
		@return map-has-key($properties, $property);
	} @else {
		@return false;
	}

}

/// Get the value of a property in a given state
///
/// @example
///  div {
///  	background-color: _oButtonsStateHasProperty(standout, selected, background);
///  }
///
/// @param {String} $theme - One of $o-buttons-themes
/// @param {String} $state - One of normal, hover, focus, selected, disabled, pressed
/// @param {String} $property - CSS property name
@function _oButtonsStateGetProperty($theme, $state, $property) {
	$states: map-get($o-buttons-themes, $theme);
	$properties: map-get($states, $state);
	@if type-of($properties) == map {
		@return map-get($properties, $property);
	} @else {
		@return false;
	}
}

/// Maps button theme names to class modifiers.
///
/// @example
///  _oButtonsGetThemeSelector('primary') // o-buttons--primary
///  _oButtonsGetThemeSelector('primary-inverse') // o-buttons--primary.o-buttons--inverse
///
/// @param {String} $theme - One of $o-buttons-themes
/// @param {String} $button-class - The base button class e.g. o-buttons
@function _oButtonsGetThemeSelector($theme, $button-class: $o-buttons-class) {
	$seperator: '-';
    $theme-parts: ();
    // Index of first seperator.
	$index: str-index($theme, $seperator);
    @while $index != null {
        // Get current theme part.
		$theme-part: str-slice($theme, length($seperator), $index - length($seperator));
		$theme-parts: append($theme-parts, $theme-part);
        // Remove theme part from the key.
        $theme: str-slice($theme, $index + length($seperator));
        // Find the next theme part in the key if any.
        $index: str-index($theme, $seperator);
    }
	// Add the remaining theme part.
	$final-theme-part: $theme;
	$theme-parts: append($theme-parts, $final-theme-part);
	// Generate the selector.
	$theme-selector: '';
	@if length($theme-parts) > 1 {
		@each $theme-part in $theme-parts {
			$prepend: if($theme-selector == '', '', '#{$theme-selector}.');
			$theme-selector: '#{$prepend}#{$button-class}--#{$theme-part}';
		}
	} @else {
		$theme-selector: '#{$button-class}--#{$theme}';
	}
	@return $theme-selector;
}
