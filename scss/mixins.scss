$o-brand: null !default; // The chosen current brand.
$o-brand-debug-mode: false !default; // Show extra (optional) warnings. E.g. value for variant not found.
$_o-brand-default: 'master'; // The fallback current brand. Allows us to check if o-brand is set explicitly.
$_o-brands: () !default; // A map of components to their defined brands.
$_o-brand-default-not-set-warning: false !default; // Has the default not set warning been output.
$_o-brand-define-readme: "https://github.com/Financial-Times/o-brand/#obranddefine";

/// Define component configuration for a brand.
///
/// @access public
/// @param {string} $component
/// @param {string} $brand
/// @param {map} $config
@mixin oBrandDefine($component, $brand, $config) {
    // Validate brand name.
    $validated-brand-name: _oBrandValidateName('Brand', $brand, 'Cannot define brand "#{$brand}" for component "#{$component}"');
    // Validate component name.
    $validated-component-name: _oBrandValidateName('Component', $component, 'Cannot define brand "#{$brand}" for component "#{$component}"');
    // Validate config.
    $validated-config: _oBrandValidateConfig($component, $brand, $config);
    // Update config.
    $_o-brands: _oBrandRecursiveMapMerge($_o-brands, ($component: ($brand: $config))) !global;
}

/// Gets the value of a component variable for the current brand.
/// If multiple variables are requested they are concatenated.
///
/// @example scss
///     @oBrandGet($component: 'o-component', $variables: ('example-border-size', 'example-border-style', 'example-border-color')); // 1px solid red
/// @example scss
///     @oBrandGet($component: 'o-component', $variables: 'example-color'); // black
/// @example scss
///     @oBrandGet($component: 'o-component', $variables: 'example-color', $from: 'inverse'); // white
/// @example scss
///     @oBrandGet($component: 'o-component', $variables: 'example-color', $from: (example-color: yellow)); // yellow
///
/// @access public
/// @param {string} $component
/// @param {string | list} $variables
/// @param {map|string} $from Get variable values from a defined brand variant or from a map of variables.
/// @return {string | number | color | bool | null}
@function oBrandGet($component, $variables, $from: null) {
    // Validate component name.
    $validated-component-name: _oBrandValidateName('Component', $component, 'Cannot get variable(s) "#{$variables}" for component "#{$component}"');
    // Validate variant name if getting the variables from a pre-defined variant.
    @if type-of($from) != 'map' and type-of($from) != 'null' {
        $validated: _oBrandValidateName(
            'Variant',
            $from,
            'Get variables "#{$variables}" for "#{$component}" from "#{$from}"'
        );
    }
    // Validate names of the variables we are trying to get.
    @each $variable-name in $variables {
        $validated-variable-names: _oBrandValidateName(
            'Variable',
            $variable-name,
            'Cannot get variable "#{$variable-name}" for component "#{$component}" from variant "#{$from}"'
        );
    }
    // If from default component variables or a pre-defined variant.
    @if type-of($from) == 'string' or type-of($from) == 'null' {
        $brand-config: _oBrandGetConfig($component, $o-brand);
        $brand-variables: map-get($brand-config, 'variables');
        @if type-of($from) == 'null' {
            // Get from default variables.
            $from: $brand-variables;
        } @else if type-of($from) == 'string' {
            // Get from variant variables.
            $from: map-get($brand-variables, $from);
        }
    }

    // No variable values defined.
    @if type-of($from) != 'map' {
        @return null;
    }

    // Get and concatenate requested variable values.
    $values: null;
    @each $variable in $variables {
        $value: map-get($from, $variable);
        @if type-of($value) == 'map' {
            @error 'Could not get variable "#{$variable}" for component "#{component}" as it is a map of variant variables.';
        }
        @if $values {
            $values: join($values, $value);
        } @else {
            $values: $value;
        }
    }

    @return $values;
}

/// Check if the brand supports a variant.
///
/// @example scss
///     oBrandSupportsVariant($component: 'o-component', $variant: 'breadcrumbs');
///     oBrandSupportsVariant($component: 'o-component', $variant: 'inverse');
///
/// @access public
/// @param {string} $component
/// @param {string} $variant
/// @return {boolean}
@function oBrandSupportsVariant($component, $variant) {
    // Validate component name.
    $validated-component-name: _oBrandValidateName('Component', $component, 'Cannot check component "#{$component}" supports variant "#{$variant}"');
    // A custom or null variant is always supported.
    @if type-of($variant) == 'map' and type-of($variant) == 'null' {
        @return true;
    }
    // Confirm the variant is valid, to provide a useful error in case of typos etc.
    $validated: _oBrandValidateName(
        'Variant',
        $variant,
        'Cannot check if component "#{$component}" supports variant "#{$variant}"'
    );
    // Check support for a pre-defined variant.
    $brand: _oBrandGetCurrentBrand();
    $brand-config: _oBrandGetConfig($component, $o-brand);
    $supports-variants: map-get($brand-config, 'supports-variants');
    @if type-of($supports-variants) == 'list' {
        @return if(index($supports-variants, $variant), true, false);
    }
    @if type-of($supports-variants) == 'string' {
        @return $variant == $supports-variants;
    }
    // No variants are supported.
    @return false;
}

/// Validate config.
///
/// @access private
/// @param {string} $component
/// @param {string} $brand
/// @param {map} $config
/// @return {map}
@function _oBrandValidateConfig($component, $brand, $config) {
    $error-message: '"#{$component}" configuration for brand "#{$brand}" is invalid';
    $error-message-link: 'Example brand configuration can be seen in the readme: #{$_o-brand-define-readme}';
    @if type-of($config) != 'map' {
        @error '#{$error-message}. Its configuration must be a map. #{$error-message-link}';
    }
    // Validate variables key (an empty map is of type list).
    $variables: map-get($config, 'variables');
    @if not $variables {
        @error '#{$error-message}. Config key "variables" is missing. #{$error-message-link}';
    }
    $supports-variants: map-get($config, 'supports-variants');
    @if not $supports-variants {
        @error '#{$error-message}. Config key "supports-variants" is missing. #{$error-message-link}';
    }
    @if $variables and (type-of($variables) != 'map' and type-of($variables) != 'list' ) {
        @error '#{$error-message}. Config key "variables" should be a map but is of type #{type-of($variables)}. #{$error-message-link}';
    }
    // Validate default variable names.
    @if type-of($variables) == 'map' {
        @each $variable-name, $value in $variables {
            @if type-of($value) != 'map' {
                $validated-default-variables: _oBrandValidateName(
                    'Variable',
                    $variable-name,
                    'Cannot set variable(s) "#{$variable-name}" of component "#{$component}" for brand "#{$brand}"'
                );
            }
        }
    }
    // Validate variant names.
    @each $variant-name, $variant-variables in $variables {
        @if type-of($variant-variables) == 'map' {
            $validated-variant-name: _oBrandValidateName(
                'Variant',
                $variant-name,
                'Cannot set variables for variant "#{$variant-name}" of component "#{$component}" for brand "#{$brand}"'
            );
            // Validate variant variable names.
            @each $variable-name, $variant-variables in $variant-variables {
                $validated-variant-variables: _oBrandValidateName(
                    'Variable',
                    $variable-name,
                    'Cannot set variable "#{$variable-name}" for variant "#{$variant-name}" of component "#{$component}" and brand "#{$brand}"'
                );
            }
        }
    }
    // Validate supports variants key.
    @if $supports-variants and type-of($supports-variants) != 'list' and type-of($supports-variants) != 'string' {
        @error '#{$error-message}. Config key "#{$supports-variants}" should be a list but is of type #{type-of($supports-variants)}. #{$error-message-link}';
    }
    // Check variant names within supports variants.
    @each $variant-name in $supports-variants {
        $validated: _oBrandValidateName(
            'Variant',
            $variant-name,
            'Cannot set supported variants for component "#{$component}" and brand "#{$brand}"'
        );
    }
    @return true;
}

/// Check the brand is configured.
///
/// @access private
/// @param {string} $component
/// @param {string} $brand
/// @return {boolean}
@function _oBrandIsDefined($component, $brand) {
    $component-brands: map-get($_o-brands, $component);
    $component-brands: if(type-of($component-brands) == 'map', $component-brands, ());
    @return type-of(map-get($component-brands, $brand)) == 'map';
}

/// Get the currently configured brand.
/// @return {string}
/// @access private
@function _oBrandGetCurrentBrand() {
    @return if($o-brand, $o-brand, $_o-brand-default);
}

/// Get all config for a given component and brand.
///
/// @access private
/// @param {string} $component
/// @param {string} $brand
/// @return {map}
@function _oBrandGetConfig($component, $brand) {
    // Get config for the brand.
    $component-brands: map-get($_o-brands, $component);
    $component-brands: if(type-of($component-brands) == 'map', $component-brands, ());
    $brand-config: map-get($component-brands, $brand);
    // The default brand must be configured before o-brand can be used.
    @if not _oBrandIsDefined($component, $_o-brand-default) {
        @error 'The default brand "#{$_o-brand-default}" must be defined for "#{$component}" before using o-brand.';
    }
    // Validate the requested brand is configured, fallback to the default brand otherwise.
    @if $brand-config == null {
        @if not $_o-brand-default-not-set-warning and $o-brand-debug-mode == true {
            $_o-brand-default-not-set-warning: true !global;
            @warn 'The requested brand "#{$brand}" has not been set. Using "#{$_o-brand-default}" brand instead.';
        }
        @return _oBrandGetConfig($component, $_o-brand-default);
    }
    @return $brand-config;
}

/// Merge config maps recursively.
/// Keys in $map2 will take precedence over keys in $map1.
///
/// @acess private
/// @link https://github.com/pentzzsolt/sass-recursive-map-merge/
@function _oBrandRecursiveMapMerge($map1, $map2) {
    @if ((type-of($map1) == map or type-of($map1) == list) and (type-of($map2) == map or type-of($map2) == list)) {
        $result: $map1;
        @each $key, $value in $map2 {
            @if (type-of(map-get($result, $key)) == map and type-of($value) == map) {
                $result: map-merge($result, ($key: _oBrandRecursiveMapMerge(map-get($result, $key), $value)));
            } @else {
                $result: map-merge($result, ($key: $value));
            }
        }
        @return $result;
    } @else {
        @warn '_oBrandRecursiveMapMerge() expects it\'s parameters to be of type "map".';
        @return null;
    }
}

/// Check a string is a valid `o-brand` name and error if not.
/// - Type string.
/// - No empty string.
/// - Contains only lowercase alphanumeric characters or dash "-".
///
/// @access private
/// @param {string} $thing E.g. "Component", "Brand", "Variant"
/// @param {string} $name The name to validate
/// @param {string} $error-context E.g. "Unable to define brand"
@function _oBrandValidateName($thing, $name, $error-context: '') {
    // Strings only.
    @if type-of($name) != 'string' {
        @error '#{$error-context}. #{$thing} "#{$name}" is invalid. #{$thing} names must be a string.';
    }
    // No empty strings.
    @if $name == '' {
        @error '#{$error-context}. #{$thing} "#{$name}" is invalid. #{$thing} names can not be an empty string.';
    }
    // Valid characters only.
    $valid-characters: ('-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
    @for $character-index from 1 through str-length($name) {
        $character: str-slice($name, $character-index, $character-index);
        @if $character == " " {
            @error '#{$error-context}. #{$thing} "#{$name}" is invalid. #{$thing} names can not contain spaces.';
        }
        @if not index($valid-characters, $character) {
            @error '#{$error-context}. #{$thing} "#{$name}" is invalid. #{$thing} names can only contain lowercase alphanumeric characters and "-".';
        }
    }
    @return true;
}
